{
  
    
        "post0": {
            "title": "Export statique des états de graphs",
            "content": "Panel",
            "url": "https://slamer59.github.io/energies-domestique/fastpages/jupytern%20sankey/2021/04/19/Export-des-%C3%A9tats.html",
            "relUrl": "/fastpages/jupytern%20sankey/2021/04/19/Export-des-%C3%A9tats.html",
            "date": " • Apr 19, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Introducing fastpages with hvplot",
            "content": "//|&gt; filter(fn: (r) =&gt; r[&quot;_measurement&quot;] == &quot;solarmanpv&quot;) // |&gt; filter(fn: (r) =&gt; r[&quot;_field&quot;] == &quot;Courant DC PV1&quot; or r[&quot;_field&quot;] == &quot;Courant DC PV2&quot;) . query_api = client.query_api() query = &#39;&#39;&#39;from(bucket: &quot;energie&quot;) |&gt; range(start: -1d) |&gt; filter(fn: (r) =&gt; r[&quot;_field&quot;] == &quot;W&quot;) |&gt; yield(name: &quot;mean&quot;)&#39;&#39;&#39; result = client.query_api().query_data_frame(org=ORG, query=query) result.columns = [&#39;result&#39;, &#39;table&#39;, &#39;start&#39;, &#39;stop&#39;, &#39;time&#39;, &#39;value&#39;, &#39;field&#39;, &#39;measurement&#39;, &#39;host&#39;, &#39;topic&#39;] df = result.head(20)[[&#39;time&#39;,&#39;value&#39;]] df = df.set_index(&#39;time&#39;) . df.hvplot() . import numpy as np from bokeh.models import Range1d, LinearAxis interval = &#39;60S&#39; interval = str((df.index.max() - df.index.min()).seconds + 1) + &quot;S&quot; def apply_formatter(plot, element): p = plot.state # create secondary range and axis p.extra_y_ranges = {&quot;twiny&quot;: Range1d(start=0, end=1)} p.add_layout(LinearAxis(y_range_name=&quot;twiny&quot;), &#39;left&#39;) # set glyph y_range_name to the one we&#39;ve just created glyph = p.select(dict(type=GlyphRenderer))[0] glyph.y_range_name = &#39;twiny&#39; def apply_formatter(plot, element): p = plot.state # create secondary range and axis p.extra_y_ranges = {&quot;twiny&quot;: Range1d(start=0, end=35)} p.add_layout(LinearAxis(y_range_name=&quot;twiny&quot;), &#39;right&#39;) # set glyph y_range_name to the one we&#39;ve just created glyph = p.select(dict(type=GlyphRenderer))[0] glyph.y_range_name = &#39;twiny&#39; df.hvplot(yaxis=&quot;left&quot;).opts(hooks=[apply_formatter]) * df.rolling(interval).apply(np.trapz).hvplot(yaxis=&quot;right&quot;) . WARNING:param.CurvePlot19219: Plotting hook &lt;function apply_formatter at 0x7f08f594a4c0&gt; could not be applied: name &#39;GlyphRenderer&#39; is not defined . (df.hvplot() ) #+ df.rolling(interval).apply(np.trapz).hvplot()).cols(1) .",
            "url": "https://slamer59.github.io/energies-domestique/fastpages/jupyter/2021/04/19/Ajout-donn%C3%A9es-irr%C3%A9guli%C3%A8res-+-integrale.html",
            "relUrl": "/fastpages/jupyter/2021/04/19/Ajout-donn%C3%A9es-irr%C3%A9guli%C3%A8res-+-integrale.html",
            "date": " • Apr 19, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Sankey_story",
            "content": "100% Elec . Sur les différentes années de ce projet, la maison et son usage ont évolués, d&#39;un coté l&#39;isolation a été améliorée ponctuellement par certains travaux, d&#39;un autre coté la famille s&#39;est agrandie. Je fais le choix de figer les besoins de la maison en chauffage, ECS et électricité domestique afin de pouvoir comparer différentes configuration sur une base commune. . Par rapport au DPE, j&#39;ai considéré les besoins suivants: . Besoin en chauffage : 15 200 kWh annuel, soit +30% par rapport à l&#39;estimation du DPE initial. Cette valeur est estimée à partir du suivi de consommation des factures sur plusieurs années. Il est cependant difficile de suivre correctement la consommation de bois d&#39;une année sur l&#39;autre. L&#39;estimation du besoin du DPE est fait par rapport à une valeur de consigne de chauffage à 19°C 1, en pratique nous avons une température de consigne à 21°C. | Production d&#39;ECS 1800kWh annuel. Il est estimée à 600 kWh/personne/an 2, en considérant 2 adultes et 2 enfants, | Besoin en électricité domestique : 3998kWh annuel. Il est estimé à 1100 kWh/an/personne 3 soit 3300 kWh annuel pour 2 adultes et 2 enfants. Il faut ajouter la consommation spécifique de la piscine, en considérant 6 h de fonctionnement par jour pendant 5 mois et une puissance de pompe de 750 W, la consommation annuelle est de 697 kWh. Ces données sont cohérentes avec les consommations constatées sur plusieurs années. | . Je vais utiliser des diagrammes Sankey, en partant de la configuration la plus simple ou seule l&#39;électricité est utilisée pour répondre aux besoins de la maison: . Ratio_pertes = 2.58 Frac_nucleaire=0.65 Frac_ENR_reseau=0.25 Frac_gaz=1-Frac_ENR_reseau-Frac_nucleaire rdt_chaud=0.95 rdt_insert=0.75 #(0.90 sinon) PV_frac_autoconso = 1 nb_pers = 3 Total_chauff_SdB = 15200 Total_ECS = 600*nb_pers Total_pompe_piscine = 6*5*31*0.750 Total_conso_elec = 1100*nb_pers + Total_chauff_SdB + Total_ECS + Total_pompe_piscine Total_conso_elec_reseau = Total_conso_elec #*PV_frac_autoconso Part_PAC=0 Total_conso_gaz = 0*(1-Part_PAC) Total_conso_bois = 3500*0 Frac_recup_bois = 0 Total_prod_PV = 0 Total_revente_PV = (Total_prod_PV-Total_conso_elec*(1-PV_frac_autoconso)) Total_charge_batterie = Total_prod_PV *0.3*0 Total_decharge_batterie = Total_charge_batterie*0.85*0 Total_prod_thermique = 0 Total_prod_thermique_piscine = 0 Total_th_PAC = 10000*Part_PAC sCOP = 1.8*2.5 Total_thermique = Total_conso_gaz*rdt_chaud + Total_prod_thermique + Frac_recup_bois*Total_conso_bois + Total_th_PAC . sankey_plotly_elec . Elec + Bois . import plotly.graph_objects as go Ratio_pertes = 2.58 Frac_nucleaire=0.65 Frac_ENR_reseau=0.25 Frac_gaz=1-Frac_ENR_reseau-Frac_nucleaire rdt_chaud=0.95 rdt_insert=0.75 #(0.90 sinon) PV_frac_autoconso = 1 nb_pers = 3 Total_conso_bois = 3500 Total_chauff_SdB = 15200 - Total_conso_bois*rdt_insert Total_ECS = 600*nb_pers Total_pompe_piscine = 6*5*31*0.750 Total_conso_elec = 1100*nb_pers + Total_chauff_SdB + Total_ECS + Total_pompe_piscine Total_conso_elec_reseau = Total_conso_elec #*PV_frac_autoconso Part_PAC=0 Total_conso_gaz = 0*(1-Part_PAC) Frac_recup_bois = 0 Total_prod_PV = 0 Total_revente_PV = (Total_prod_PV-Total_conso_elec*(1-PV_frac_autoconso)) Total_charge_batterie = Total_prod_PV *0.3*0 Total_decharge_batterie = Total_charge_batterie*0.85*0 Total_prod_thermique = 0 Total_prod_thermique_piscine = 0 Total_th_PAC = 10000*Part_PAC sCOP = 1.8*2.5 Total_thermique = Total_conso_gaz*rdt_chaud + Total_prod_thermique + Frac_recup_bois*Total_conso_bois + Total_th_PAC fig = go.Figure(go.Sankey( arrangement = &quot;snap&quot;, textfont=dict(color=&quot;black&quot;, size=25), node = { &quot;label&quot;: [&quot;Non renouvelable&quot;, # 0 &quot;ENR&quot;, # 1 &quot;Nucléaire&quot;, # 2 &quot;Gaz&quot;, # 3 &quot;ENR Réseau&quot;, # 4 &quot;Photovoltaïque&quot;, # 5 &quot;Solaire thermique&quot;, # 6 &quot;Air (PAC)&quot;, # 7 &quot;Bois&quot;, # 8 &quot;Electricité Réseau&quot;, # 9 &quot;Pertes&quot;, # 10 &quot;Electricité domestique&quot;, # 11 &quot;Usage direct&quot;, # 12 &quot;Batterie&quot;, # 13 &quot;Revente&quot;, # 14 &quot;Prod eau chaude&quot;, # 15 &quot;Chauffage&quot;, # 16 &quot;ECS&quot;, # 17 &quot;Chauffage piscine&quot;, # 18 &quot;PAC&quot;, # 19 &quot;Autre&quot;, # 20 &quot;Piscine&quot;, # 21 &quot;Piscine&quot; # 22 ], # &quot;x&quot;: [0.2, 0.1, 0.5, 0.7, 0.3, 0.5], # &quot;y&quot;: [0.7, 0.5, 0.2, 0.4, 0.2, 0.3], &#39;pad&#39;:20}, # 10 Pixels link = { &quot;source&quot;: [0, 0, 1, 1, 1, 1, 1, 2, 3, 4, 9,9, 5, 11,11,11, 14, 13, 3, 6, 7, 8, 15,12, 6, 12, 8, 12, 19, 12, 13, 3, 8, 12, 18, 21 ], &quot;target&quot;: [2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 12,10, 11, 12,13,14, 4, 12, 15, 15, 19, 15, 16,17, 18, 16, 16, 19, 15, 20, 10, 10, 10, 21, 22, 22 ], &quot;value&quot;: [Total_conso_elec_reseau*Ratio_pertes*Frac_nucleaire, Total_conso_elec_reseau*Ratio_pertes*Frac_gaz+ Total_conso_gaz, Total_conso_elec_reseau*Ratio_pertes*Frac_ENR_reseau, Total_prod_PV, Total_prod_thermique+Total_prod_thermique_piscine, Total_th_PAC*(1-1/sCOP), Total_conso_bois, Total_conso_elec_reseau*Ratio_pertes*Frac_nucleaire, Total_conso_elec_reseau*Ratio_pertes*Frac_gaz, Total_conso_elec_reseau*Ratio_pertes*Frac_ENR_reseau, # + INJ Total_conso_elec_reseau, Total_conso_elec_reseau*(Ratio_pertes-1), Total_prod_PV, Total_conso_elec*0-Total_decharge_batterie*0, Total_charge_batterie, Total_revente_PV, ### Total_revente_PV, Total_decharge_batterie, Total_conso_gaz*rdt_chaud, Total_prod_thermique, Total_th_PAC*(1-1/sCOP), Total_conso_bois*rdt_insert*Frac_recup_bois, Total_thermique-Total_ECS,Total_ECS, Total_prod_thermique_piscine, Total_chauff_SdB, Total_conso_bois*rdt_insert*(1-Frac_recup_bois), Total_th_PAC/sCOP, Total_th_PAC, Total_conso_elec-Total_th_PAC/sCOP-Total_chauff_SdB-Total_pompe_piscine -Total_ECS, Total_charge_batterie-Total_decharge_batterie, Total_conso_gaz*(1-rdt_chaud), Total_conso_bois*(1-rdt_insert), Total_pompe_piscine, Total_prod_thermique_piscine, Total_pompe_piscine*0 ] })) sankey_plotly_elec_bois = pn.pane.Plotly(fig) scenarios[&#39;Electricité &amp; Bois&#39;] = sankey_plotly_elec_bois filename = &#39;../_includes/sankey_plotly_elec_bois.html&#39; export_plot_fastpages(pn.panel(sankey_plotly_elec_bois), filename) . sankey_plotly_elec_bois . Rotex . import plotly.graph_objects as go Ratio_pertes = 2.58 Frac_nucleaire=0.65 Frac_ENR_reseau=0.25 Frac_gaz=1-Frac_ENR_reseau-Frac_nucleaire rdt_chaud=0.95 rdt_insert=0.75 #(0.90 sinon) PV_frac_autoconso = 1 nb_pers = 3 Total_conso_bois = 3500 Total_chauff_SdB = 200 Total_ECS = 600*nb_pers Total_pompe_piscine = 6*5*31*0.750 Total_conso_elec = 1100*nb_pers + Total_chauff_SdB + Total_pompe_piscine Total_conso_elec_reseau = Total_conso_elec*PV_frac_autoconso Part_PAC=0 Total_prod_thermique = 3000 Total_conso_gaz = (15200 - Total_conso_bois*rdt_insert - Total_chauff_SdB - Total_prod_thermique )*(1-Part_PAC)+ Total_ECS Frac_recup_bois = 0.3*0 Total_prod_PV = 5900*0 Total_revente_PV = (Total_prod_PV-Total_conso_elec*(1-PV_frac_autoconso))*0 Total_charge_batterie = Total_prod_PV *0.3*0 Total_decharge_batterie = Total_charge_batterie*0.85*0 Total_prod_thermique_piscine = 3800*0 Total_th_PAC = (15200 - Total_conso_bois*rdt_insert - Total_chauff_SdB )*Part_PAC sCOP = 1.8*2.5 Total_thermique = Total_conso_gaz*rdt_chaud + Total_prod_thermique + Frac_recup_bois*Total_conso_bois + Total_th_PAC fig = go.Figure(go.Sankey( arrangement = &quot;snap&quot;, textfont=dict(color=&quot;black&quot;, size=25), node = { &quot;label&quot;: [&quot;Non renouvelable&quot;, # 0 &quot;ENR&quot;, # 1 &quot;Nucléaire&quot;, # 2 &quot;Gaz&quot;, # 3 &quot;ENR Réseau&quot;, # 4 &quot;Photovoltaïque&quot;, # 5 &quot;Solaire thermique&quot;, # 6 &quot;Air (PAC)&quot;, # 7 &quot;Bois&quot;, # 8 &quot;Electricité Réseau&quot;, # 9 &quot;Pertes&quot;, # 10 &quot;Electricité domestique&quot;, # 11 &quot;Usage direct&quot;, # 12 &quot;Batterie&quot;, # 13 &quot;Revente&quot;, # 14 &quot;Prod eau chaude&quot;, # 15 &quot;Chauffage&quot;, # 16 &quot;ECS&quot;, # 17 &quot;Chauffage piscine&quot;, # 18 &quot;PAC&quot;, # 19 &quot;Autre&quot;, # 20 &quot;Piscine&quot;, # 21 &quot;Piscine&quot; # 22 ], # &quot;x&quot;: [0.2, 0.1, 0.5, 0.7, 0.3, 0.5], # &quot;y&quot;: [0.7, 0.5, 0.2, 0.4, 0.2, 0.3], &#39;pad&#39;:20}, # 10 Pixels link = { &quot;source&quot;: [0, 0, 1, 1, 1, 1, 1, 2, 3, 4, 9,9, 5, 11,11,11, 14, 13, 3, 6, 7, 8, 15,15, 6, 12, 8, 12, 19, 12, 13, 3, 8, 12, 18, 21 ], &quot;target&quot;: [2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 12,10, 11, 12,13,14, 4, 12, 15, 15, 19, 15, 16,17, 18, 16, 16, 19, 15, 20, 10, 10, 10, 21, 22, 22 ], &quot;value&quot;: [Total_conso_elec_reseau*Ratio_pertes*Frac_nucleaire, Total_conso_elec_reseau*Ratio_pertes*Frac_gaz+ Total_conso_gaz, Total_conso_elec_reseau*Ratio_pertes*Frac_ENR_reseau, Total_prod_PV, Total_prod_thermique+Total_prod_thermique_piscine, Total_th_PAC*(1-1/sCOP), Total_conso_bois, Total_conso_elec_reseau*Ratio_pertes*Frac_nucleaire, Total_conso_elec_reseau*Ratio_pertes*Frac_gaz, Total_conso_elec_reseau*Ratio_pertes*Frac_ENR_reseau, # + INJ Total_conso_elec_reseau, Total_conso_elec_reseau*(Ratio_pertes-1), Total_prod_PV, Total_conso_elec*0-Total_decharge_batterie, Total_charge_batterie, Total_revente_PV, ### Total_revente_PV, Total_decharge_batterie, Total_conso_gaz*rdt_chaud, Total_prod_thermique, Total_th_PAC*(1-1/sCOP), Total_conso_bois*rdt_insert*Frac_recup_bois, Total_thermique-Total_ECS,Total_ECS, Total_prod_thermique_piscine, Total_chauff_SdB, Total_conso_bois*rdt_insert*(1-Frac_recup_bois), Total_th_PAC/sCOP, Total_th_PAC, Total_conso_elec-Total_th_PAC/sCOP-Total_chauff_SdB-Total_pompe_piscine, Total_charge_batterie-Total_decharge_batterie, Total_conso_gaz*(1-rdt_chaud), Total_conso_bois*(1-rdt_insert), Total_pompe_piscine, Total_prod_thermique_piscine, Total_pompe_piscine*0 ] })) sankey_plotly_rotex = pn.pane.Plotly(fig) scenarios[&#39;Combiné gaz condensation/solaire&#39;] = sankey_plotly_rotex filename = &#39;../_includes/sankey_plotly_rotex.html&#39; export_plot_fastpages(pn.panel(sankey_plotly_rotex), filename) . sankey_plotly_rotex . Rotex gaz uniquement . import plotly.graph_objects as go Ratio_pertes = 2.58 Frac_nucleaire=0.65 Frac_ENR_reseau=0.25 Frac_gaz=1-Frac_ENR_reseau-Frac_nucleaire rdt_chaud=0.95 rdt_insert=0.75 #(0.90 sinon) PV_frac_autoconso = 1 nb_pers = 3 Total_conso_bois = 3500 Total_chauff_SdB = 200 Total_ECS = 600*nb_pers Total_pompe_piscine = 6*5*31*0.750 Total_conso_elec = 1100*nb_pers + Total_chauff_SdB + Total_pompe_piscine Total_conso_elec_reseau = Total_conso_elec*PV_frac_autoconso Part_PAC=0 Total_prod_thermique = 3000*0 Total_conso_gaz = (15200 - Total_conso_bois*rdt_insert - Total_chauff_SdB - Total_prod_thermique )*(1-Part_PAC)+ Total_ECS Frac_recup_bois = 0.3*0 Total_prod_PV = 5900*0 Total_revente_PV = (Total_prod_PV-Total_conso_elec*(1-PV_frac_autoconso))*0 Total_charge_batterie = Total_prod_PV *0.3*0 Total_decharge_batterie = Total_charge_batterie*0.85*0 Total_prod_thermique_piscine = 3800*0 Total_th_PAC = (15200 - Total_conso_bois*rdt_insert - Total_chauff_SdB )*Part_PAC sCOP = 1.8*2.5 Total_thermique = Total_conso_gaz*rdt_chaud + Total_prod_thermique + Frac_recup_bois*Total_conso_bois + Total_th_PAC fig = go.Figure(go.Sankey( arrangement = &quot;snap&quot;, textfont=dict(color=&quot;black&quot;, size=25), node = { &quot;label&quot;: [&quot;Non renouvelable&quot;, # 0 &quot;ENR&quot;, # 1 &quot;Nucléaire&quot;, # 2 &quot;Gaz&quot;, # 3 &quot;ENR Réseau&quot;, # 4 &quot;Photovoltaïque&quot;, # 5 &quot;Solaire thermique&quot;, # 6 &quot;Air (PAC)&quot;, # 7 &quot;Bois&quot;, # 8 &quot;Electricité Réseau&quot;, # 9 &quot;Pertes&quot;, # 10 &quot;Electricité domestique&quot;, # 11 &quot;Usage direct&quot;, # 12 &quot;Batterie&quot;, # 13 &quot;Revente&quot;, # 14 &quot;Prod eau chaude&quot;, # 15 &quot;Chauffage&quot;, # 16 &quot;ECS&quot;, # 17 &quot;Chauffage piscine&quot;, # 18 &quot;PAC&quot;, # 19 &quot;Autre&quot;, # 20 &quot;Piscine&quot;, # 21 &quot;Piscine&quot; # 22 ], # &quot;x&quot;: [0.2, 0.1, 0.5, 0.7, 0.3, 0.5], # &quot;y&quot;: [0.7, 0.5, 0.2, 0.4, 0.2, 0.3], &#39;pad&#39;:20}, # 10 Pixels link = { &quot;source&quot;: [0, 0, 1, 1, 1, 1, 1, 2, 3, 4, 9,9, 5, 11,11,11, 14, 13, 3, 6, 7, 8, 15,15, 6, 12, 8, 12, 19, 12, 13, 3, 8, 12, 18, 21 ], &quot;target&quot;: [2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 12,10, 11, 12,13,14, 4, 12, 15, 15, 19, 15, 16,17, 18, 16, 16, 19, 15, 20, 10, 10, 10, 21, 22, 22 ], &quot;value&quot;: [Total_conso_elec_reseau*Ratio_pertes*Frac_nucleaire, Total_conso_elec_reseau*Ratio_pertes*Frac_gaz+ Total_conso_gaz, Total_conso_elec_reseau*Ratio_pertes*Frac_ENR_reseau, Total_prod_PV, Total_prod_thermique+Total_prod_thermique_piscine, Total_th_PAC*(1-1/sCOP), Total_conso_bois, Total_conso_elec_reseau*Ratio_pertes*Frac_nucleaire, Total_conso_elec_reseau*Ratio_pertes*Frac_gaz, Total_conso_elec_reseau*Ratio_pertes*Frac_ENR_reseau, # + INJ Total_conso_elec_reseau, Total_conso_elec_reseau*(Ratio_pertes-1), Total_prod_PV, Total_conso_elec*0-Total_decharge_batterie, Total_charge_batterie, Total_revente_PV, ### Total_revente_PV, Total_decharge_batterie, Total_conso_gaz*rdt_chaud, Total_prod_thermique, Total_th_PAC*(1-1/sCOP), Total_conso_bois*rdt_insert*Frac_recup_bois, Total_thermique-Total_ECS,Total_ECS, Total_prod_thermique_piscine, Total_chauff_SdB, Total_conso_bois*rdt_insert*(1-Frac_recup_bois), Total_th_PAC/sCOP, Total_th_PAC, Total_conso_elec-Total_th_PAC/sCOP-Total_chauff_SdB-Total_pompe_piscine, Total_charge_batterie-Total_decharge_batterie, Total_conso_gaz*(1-rdt_chaud), Total_conso_bois*(1-rdt_insert), Total_pompe_piscine, Total_prod_thermique_piscine, Total_pompe_piscine*0 ] })) sankey_plotly_rotex_gaz = pn.pane.Plotly(fig) scenarios[&#39;Gaz seul&#39;] = sankey_plotly_rotex_gaz filename = &#39;../_includes/sankey_plotly_rotex_gaz.html&#39; export_plot_fastpages(pn.panel(sankey_plotly_rotex_gaz), filename) . sankey_plotly_rotex_gaz . Rotex + piscine . import plotly.graph_objects as go Ratio_pertes = 2.58 Frac_nucleaire=0.65 Frac_ENR_reseau=0.25 Frac_gaz=1-Frac_ENR_reseau-Frac_nucleaire rdt_chaud=0.95 rdt_insert=0.75 #(0.90 sinon) PV_frac_autoconso = 1 nb_pers = 3 Total_conso_bois = 3500 Total_chauff_SdB = 200 Total_ECS = 600*nb_pers Total_pompe_piscine = 6*5*31*0.750 Total_conso_elec = 1100*nb_pers + Total_chauff_SdB + Total_pompe_piscine Total_conso_elec_reseau = Total_conso_elec*PV_frac_autoconso Part_PAC=0 Total_prod_thermique = 3000 Total_conso_gaz = (15200 - Total_conso_bois*rdt_insert - Total_chauff_SdB - Total_prod_thermique)*(1-Part_PAC) + Total_ECS Frac_recup_bois = 0.3*0 Total_prod_PV = 5900*0 Total_revente_PV = (Total_prod_PV-Total_conso_elec*(1-PV_frac_autoconso))*0 Total_charge_batterie = Total_prod_PV *0.3*0 Total_decharge_batterie = Total_charge_batterie*0.85*0 Total_prod_thermique_piscine = 3800 Total_th_PAC = (15200 - Total_conso_bois*rdt_insert - Total_chauff_SdB )*Part_PAC sCOP = 1.8*2.5 Total_thermique = Total_conso_gaz*rdt_chaud + Total_prod_thermique + Frac_recup_bois*Total_conso_bois + Total_th_PAC fig = go.Figure(go.Sankey( arrangement = &quot;snap&quot;, textfont=dict(color=&quot;black&quot;, size=25), node = { &quot;label&quot;: [&quot;Non renouvelable&quot;, # 0 &quot;ENR&quot;, # 1 &quot;Nucléaire&quot;, # 2 &quot;Gaz&quot;, # 3 &quot;ENR Réseau&quot;, # 4 &quot;Photovoltaïque&quot;, # 5 &quot;Solaire thermique&quot;, # 6 &quot;Air (PAC)&quot;, # 7 &quot;Bois&quot;, # 8 &quot;Electricité Réseau&quot;, # 9 &quot;Pertes&quot;, # 10 &quot;Electricité domestique&quot;, # 11 &quot;Usage direct&quot;, # 12 &quot;Batterie&quot;, # 13 &quot;Revente&quot;, # 14 &quot;Prod eau chaude&quot;, # 15 &quot;Chauffage&quot;, # 16 &quot;ECS&quot;, # 17 &quot;Chauffage piscine&quot;, # 18 &quot;PAC&quot;, # 19 &quot;Autre&quot;, # 20 &quot;Pompe Piscine&quot;, # 21 &quot;Piscine&quot; # 22 ], # &quot;x&quot;: [0.2, 0.1, 0.5, 0.7, 0.3, 0.5], # &quot;y&quot;: [0.7, 0.5, 0.2, 0.4, 0.2, 0.3], &#39;pad&#39;:40}, # 10 Pixels link = { &quot;source&quot;: [0, 0, 1, 1, 1, 1, 1, 2, 3, 4, 9,9, 5, 11,11,11, 14, 13, 3, 6, 7, 8, 15,15, 6, 12, 8, 12, 19, 12, 13, 3, 8, 12, 18, 21 ], &quot;target&quot;: [2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 12,10, 11, 12,13,14, 4, 12, 15, 15, 19, 15, 16,17, 18, 16, 16, 19, 15, 20, 10, 10, 10, 21, 22, 22 ], &quot;value&quot;: [Total_conso_elec_reseau*Ratio_pertes*Frac_nucleaire, Total_conso_elec_reseau*Ratio_pertes*Frac_gaz+ Total_conso_gaz, Total_conso_elec_reseau*Ratio_pertes*Frac_ENR_reseau, Total_prod_PV, Total_prod_thermique+Total_prod_thermique_piscine, Total_th_PAC*(1-1/sCOP), Total_conso_bois, Total_conso_elec_reseau*Ratio_pertes*Frac_nucleaire, Total_conso_elec_reseau*Ratio_pertes*Frac_gaz, Total_conso_elec_reseau*Ratio_pertes*Frac_ENR_reseau, # + INJ Total_conso_elec_reseau, Total_conso_elec_reseau*(Ratio_pertes-1), Total_prod_PV, Total_conso_elec*0-Total_decharge_batterie, Total_charge_batterie, Total_revente_PV, ### Total_revente_PV, Total_decharge_batterie, Total_conso_gaz*rdt_chaud, Total_prod_thermique, Total_th_PAC*(1-1/sCOP), Total_conso_bois*rdt_insert*Frac_recup_bois, Total_thermique-Total_ECS,Total_ECS, Total_prod_thermique_piscine, Total_chauff_SdB, Total_conso_bois*rdt_insert*(1-Frac_recup_bois), Total_th_PAC/sCOP, Total_th_PAC, Total_conso_elec-Total_th_PAC/sCOP-Total_chauff_SdB-Total_pompe_piscine, Total_charge_batterie-Total_decharge_batterie, Total_conso_gaz*(1-rdt_chaud), Total_conso_bois*(1-rdt_insert), Total_pompe_piscine, Total_prod_thermique_piscine, Total_pompe_piscine ] })) sankey_plotly_rotex_piscine = pn.pane.Plotly(fig) scenarios[&#39;Combiné gaz condensation/solaire &amp; Piscine&#39;] = sankey_plotly_rotex_piscine filename = &#39;../_includes/sankey_plotly_rotex_piscine.html&#39; export_plot_fastpages(pn.panel(sankey_plotly_rotex_piscine), filename) . sankey_plotly_rotex_piscine . Rotex + piscine + bouilleur . import plotly.graph_objects as go Ratio_pertes = 2.58 Frac_nucleaire=0.65 Frac_ENR_reseau=0.25 Frac_gaz=1-Frac_ENR_reseau-Frac_nucleaire rdt_chaud=0.95 rdt_insert=0.90 PV_frac_autoconso = 1 nb_pers = 3 Total_conso_bois = 3500 Total_chauff_SdB = 200 Total_ECS = 600*nb_pers Total_pompe_piscine = 6*5*31*0.750 Total_conso_elec = 1100*nb_pers + Total_chauff_SdB + Total_pompe_piscine Total_conso_elec_reseau = Total_conso_elec*PV_frac_autoconso Part_PAC=0 Total_prod_thermique = 3000 Total_conso_gaz = (15200 - Total_conso_bois*rdt_insert - Total_chauff_SdB - Total_prod_thermique)*(1-Part_PAC)+ Total_ECS Frac_recup_bois = 0.3 Total_prod_PV = 5900*0 Total_revente_PV = (Total_prod_PV-Total_conso_elec*(1-PV_frac_autoconso))*0 Total_charge_batterie = Total_prod_PV *0.3*0 Total_decharge_batterie = Total_charge_batterie*0.85*0 Total_prod_thermique_piscine = 3800 Total_th_PAC = (15200 - Total_conso_bois*rdt_insert - Total_chauff_SdB)*Part_PAC sCOP = 1.8*2.5 Total_thermique = Total_conso_gaz*rdt_chaud + Total_prod_thermique + Frac_recup_bois*Total_conso_bois + Total_th_PAC fig = go.Figure(go.Sankey( arrangement = &quot;snap&quot;, textfont=dict(color=&quot;black&quot;, size=25), node = { &quot;label&quot;: [&quot;Non renouvelable&quot;, # 0 &quot;ENR&quot;, # 1 &quot;Nucléaire&quot;, # 2 &quot;Gaz&quot;, # 3 &quot;ENR Réseau&quot;, # 4 &quot;Photovoltaïque&quot;, # 5 &quot;Solaire thermique&quot;, # 6 &quot;Air (PAC)&quot;, # 7 &quot;Bois&quot;, # 8 &quot;Electricité Réseau&quot;, # 9 &quot;Pertes&quot;, # 10 &quot;Electricité domestique&quot;, # 11 &quot;Usage direct&quot;, # 12 &quot;Batterie&quot;, # 13 &quot;Revente&quot;, # 14 &quot;Prod eau chaude&quot;, # 15 &quot;Chauffage&quot;, # 16 &quot;ECS&quot;, # 17 &quot;Chauffage piscine&quot;, # 18 &quot;PAC&quot;, # 19 &quot;Autre&quot;, # 20 &quot;Pompe Piscine&quot;, # 21 &quot;Piscine&quot; # 22 ], # &quot;x&quot;: [0.2, 0.1, 0.5, 0.7, 0.3, 0.5], # &quot;y&quot;: [0.7, 0.5, 0.2, 0.4, 0.2, 0.3], &#39;pad&#39;:40}, # 10 Pixels link = { &quot;source&quot;: [0, 0, 1, 1, 1, 1, 1, 2, 3, 4, 9,9, 5, 11,11,11, 14, 13, 3, 6, 7, 8, 15,15, 6, 12, 8, 12, 19, 12, 13, 3, 8, 12, 18, 21 ], &quot;target&quot;: [2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 12,10, 11, 12,13,14, 4, 12, 15, 15, 19, 15, 16,17, 18, 16, 16, 19, 15, 20, 10, 10, 10, 21, 22, 22 ], &quot;value&quot;: [Total_conso_elec_reseau*Ratio_pertes*Frac_nucleaire, Total_conso_elec_reseau*Ratio_pertes*Frac_gaz+ Total_conso_gaz, Total_conso_elec_reseau*Ratio_pertes*Frac_ENR_reseau, Total_prod_PV, Total_prod_thermique+Total_prod_thermique_piscine, Total_th_PAC*(1-1/sCOP), Total_conso_bois, Total_conso_elec_reseau*Ratio_pertes*Frac_nucleaire, Total_conso_elec_reseau*Ratio_pertes*Frac_gaz, Total_conso_elec_reseau*Ratio_pertes*Frac_ENR_reseau, # + INJ Total_conso_elec_reseau, Total_conso_elec_reseau*(Ratio_pertes-1), Total_prod_PV, Total_conso_elec*0-Total_decharge_batterie, Total_charge_batterie, Total_revente_PV, ### Total_revente_PV, Total_decharge_batterie, Total_conso_gaz*rdt_chaud, Total_prod_thermique, Total_th_PAC*(1-1/sCOP), Total_conso_bois*rdt_insert*Frac_recup_bois, Total_thermique-Total_ECS,Total_ECS, Total_prod_thermique_piscine, Total_chauff_SdB, Total_conso_bois*rdt_insert*(1-Frac_recup_bois), Total_th_PAC/sCOP, Total_th_PAC, Total_conso_elec-Total_th_PAC/sCOP-Total_chauff_SdB-Total_pompe_piscine, Total_charge_batterie-Total_decharge_batterie, Total_conso_gaz*(1-rdt_chaud), Total_conso_bois*(1-rdt_insert), Total_pompe_piscine, Total_prod_thermique_piscine, Total_pompe_piscine ] })) sankey_plotly_rotex_piscine_builleur = pn.pane.Plotly(fig) scenarios[&#39;Combiné gaz condensation/solaire &amp; Piscine &amp; Bouilleur&#39;] = sankey_plotly_rotex_piscine_builleur filename = &#39;../_includes/sankey_plotly_rotex_piscine_builleur.html&#39; export_plot_fastpages(pn.panel(sankey_plotly_rotex_piscine_builleur), filename) . sankey_plotly_rotex_piscine_builleur . Rotex + piscine + bouilleur + PAC . import plotly.graph_objects as go Ratio_pertes = 2.58 Frac_nucleaire=0.65 Frac_ENR_reseau=0.25 Frac_gaz=1-Frac_ENR_reseau-Frac_nucleaire rdt_chaud=0.95 rdt_insert=0.90 PV_frac_autoconso = 1 nb_pers = 3 Total_conso_bois = 3500 Total_chauff_SdB = 200 Total_ECS = 600*nb_pers Total_pompe_piscine = 6*5*31*0.750 alpha=0.77 Part_PAC=0.87 Total_prod_thermique = 3000 Total_conso_gaz = (15200 - Total_conso_bois*rdt_insert - Total_chauff_SdB - Total_prod_thermique+ Total_ECS)*(1-Part_PAC)*alpha Frac_recup_bois = 0.3 Total_th_PAC = (15200 - Total_conso_bois*rdt_insert - Total_chauff_SdB+ Total_ECS)*Part_PAC*alpha sCOP = 1.8*2.5 P_elec_PAC = Total_th_PAC / sCOP Total_conso_elec = 1100*nb_pers + Total_chauff_SdB + Total_pompe_piscine + P_elec_PAC Total_conso_elec_reseau = Total_conso_elec*PV_frac_autoconso Total_prod_PV = 5900*0 Total_revente_PV = (Total_prod_PV-Total_conso_elec*(1-PV_frac_autoconso))*0 Total_charge_batterie = Total_prod_PV *0.3*0 Total_decharge_batterie = Total_charge_batterie*0.85*0 Total_prod_thermique_piscine = 3800 Total_thermique = Total_conso_gaz*rdt_chaud + Total_prod_thermique + Frac_recup_bois*Total_conso_bois + Total_th_PAC fig = go.Figure(go.Sankey( arrangement = &quot;snap&quot;, textfont=dict(color=&quot;black&quot;, size=25), node = { &quot;label&quot;: [&quot;Non renouvelable&quot;, # 0 &quot;ENR&quot;, # 1 &quot;Nucléaire&quot;, # 2 &quot;Gaz&quot;, # 3 &quot;ENR Réseau&quot;, # 4 &quot;Photovoltaïque&quot;, # 5 &quot;Solaire thermique&quot;, # 6 &quot;Air (PAC)&quot;, # 7 &quot;Bois&quot;, # 8 &quot;Electricité Réseau&quot;, # 9 &quot;Pertes&quot;, # 10 &quot;Electricité domestique&quot;, # 11 &quot;Usage direct&quot;, # 12 &quot;Batterie&quot;, # 13 &quot;Revente&quot;, # 14 &quot;Prod eau chaude&quot;, # 15 &quot;Chauffage&quot;, # 16 &quot;ECS&quot;, # 17 &quot;Chauffage piscine&quot;, # 18 &quot;PAC&quot;, # 19 &quot;Autre&quot;, # 20 &quot;Pompe Piscine&quot;, # 21 &quot;Piscine&quot; # 22 ], # &quot;x&quot;: [0.2, 0.1, 0.5, 0.7, 0.3, 0.5], # &quot;y&quot;: [0.7, 0.5, 0.2, 0.4, 0.2, 0.3], &#39;pad&#39;:40}, # 10 Pixels link = { &quot;source&quot;: [0, 0, 1, 1, 1, 1, 1, 2, 3, 4, 9,9, 5, 11,11,11, 14, 13, 3, 6, 7, 8, 15,15, 6, 12, 8, 12, 19, 12, 13, 3, 8, 12, 18, 21 ], &quot;target&quot;: [2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 12,10, 11, 12,13,14, 4, 12, 15, 15, 19, 15, 16,17, 18, 16, 16, 19, 15, 20, 10, 10, 10, 21, 22, 22 ], &quot;value&quot;: [Total_conso_elec_reseau*Ratio_pertes*Frac_nucleaire, Total_conso_elec_reseau*Ratio_pertes*Frac_gaz+ Total_conso_gaz, Total_conso_elec_reseau*Ratio_pertes*Frac_ENR_reseau, Total_prod_PV, Total_prod_thermique+Total_prod_thermique_piscine, Total_th_PAC*(1-1/sCOP), Total_conso_bois, Total_conso_elec_reseau*Ratio_pertes*Frac_nucleaire, Total_conso_elec_reseau*Ratio_pertes*Frac_gaz, Total_conso_elec_reseau*Ratio_pertes*Frac_ENR_reseau, # + INJ Total_conso_elec_reseau, Total_conso_elec_reseau*(Ratio_pertes-1), Total_prod_PV, Total_conso_elec*0-Total_decharge_batterie, Total_charge_batterie, Total_revente_PV, ### Total_revente_PV, Total_decharge_batterie, Total_conso_gaz*rdt_chaud, Total_prod_thermique, Total_th_PAC*(1-1/sCOP), Total_conso_bois*rdt_insert*Frac_recup_bois, Total_thermique-Total_ECS,Total_ECS, Total_prod_thermique_piscine, Total_chauff_SdB, Total_conso_bois*rdt_insert*(1-Frac_recup_bois), Total_th_PAC/sCOP, Total_th_PAC, Total_conso_elec-Total_th_PAC/sCOP-Total_chauff_SdB-Total_pompe_piscine, Total_charge_batterie-Total_decharge_batterie, Total_conso_gaz*(1-rdt_chaud), Total_conso_bois*(1-rdt_insert), Total_pompe_piscine, Total_prod_thermique_piscine, Total_pompe_piscine ] })) sankey_plotly_rotex_piscine_builleur_pac = pn.pane.Plotly(fig) scenarios[&#39;Combiné gaz condensation/solaire &amp; Piscine &amp; Bouilleur &amp; PAC&#39;] = sankey_plotly_rotex_piscine_builleur_pac filename = &#39;../_includes/sankey_plotly_rotex_piscine_builleur_pac.html&#39; export_plot_fastpages(pn.panel(sankey_plotly_rotex_piscine_builleur_pac), filename) . sankey_plotly_rotex_piscine_builleur_pac . Rotex + piscine + bouilleur + PAC + PV . import plotly.graph_objects as go Ratio_pertes = 2.58 Frac_nucleaire=0.65 Frac_ENR_reseau=0.25 Frac_gaz=1-Frac_ENR_reseau-Frac_nucleaire rdt_chaud=0.95 rdt_insert=0.90 PV_frac_autoconso = 0.3 nb_pers = 3 Total_conso_bois = 3500 Total_chauff_SdB = 200 Total_ECS = 600*nb_pers Total_pompe_piscine = 6*5*31*0.750 alpha=0.77 Part_PAC=0.87 Total_prod_thermique = 3000 Total_conso_gaz = (15200 - Total_conso_bois*rdt_insert - Total_chauff_SdB - Total_prod_thermique+ Total_ECS)*(1-Part_PAC)*alpha Frac_recup_bois = 0.3 Total_th_PAC = (15200 - Total_conso_bois*rdt_insert - Total_chauff_SdB+ Total_ECS)*Part_PAC*alpha sCOP = 1.8*2.5 P_elec_PAC = Total_th_PAC / sCOP Total_conso_elec = 1100*nb_pers + Total_chauff_SdB + Total_pompe_piscine + P_elec_PAC Total_prod_PV = 5900 Total_revente_PV = (Total_prod_PV-Total_conso_elec*(1-PV_frac_autoconso)) Total_charge_batterie = Total_prod_PV *0.3 Total_decharge_batterie = Total_charge_batterie*0.85 Total_conso_elec_reseau = 2140 #Total_conso_elec*PV_frac_autoconso Total_prod_thermique_piscine = 3800 Total_thermique = Total_conso_gaz*rdt_chaud + Total_prod_thermique + Frac_recup_bois*Total_conso_bois + Total_th_PAC fig = go.Figure(go.Sankey( arrangement = &quot;snap&quot;, textfont=dict(color=&quot;black&quot;, size=25), node = { &quot;label&quot;: [&quot;Non renouvelable&quot;, # 0 &quot;ENR&quot;, # 1 &quot;Nucléaire&quot;, # 2 &quot;Gaz&quot;, # 3 &quot;ENR Réseau&quot;, # 4 &quot;Photovoltaïque&quot;, # 5 &quot;Solaire thermique&quot;, # 6 &quot;Air (PAC)&quot;, # 7 &quot;Bois&quot;, # 8 &quot;Electricité Réseau&quot;, # 9 &quot;Pertes&quot;, # 10 &quot;Electricité domestique&quot;, # 11 &quot;Usage direct&quot;, # 12 &quot;Batterie&quot;, # 13 &quot;Revente&quot;, # 14 &quot;Prod eau chaude&quot;, # 15 &quot;Chauffage&quot;, # 16 &quot;ECS&quot;, # 17 &quot;Chauffage piscine&quot;, # 18 &quot;PAC&quot;, # 19 &quot;Autre&quot;, # 20 &quot;Pompe piscine&quot;, # 21 &quot;Piscine&quot; # 22 ], # &quot;x&quot;: [0.2, 0.1, 0.5, 0.7, 0.3, 0.5], # &quot;y&quot;: [0.7, 0.5, 0.2, 0.4, 0.2, 0.3], &#39;pad&#39;:20}, # 10 Pixels link = { &quot;source&quot;: [0, 0, 1, 1, 1, 1, 1, 2, 3, 4, 9,9, 5, 11,11,11, 14, 13, 3, 6, 7, 8, 15,15, 6, 12, 8, 12, 19, 12, 13, 3, 8, 12, 18, 21 ], &quot;target&quot;: [2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 11,10, 11, 12,13,14, 4, 12, 15, 15, 19, 15, 16,17, 18, 16, 16, 19, 15, 20, 10, 10, 10, 21, 22, 22 ], &quot;value&quot;: [Total_conso_elec_reseau*Ratio_pertes*Frac_nucleaire, Total_conso_elec_reseau*Ratio_pertes*Frac_gaz+ Total_conso_gaz, Total_conso_elec_reseau*Ratio_pertes*Frac_ENR_reseau, Total_prod_PV, Total_prod_thermique+Total_prod_thermique_piscine, Total_th_PAC*(1-1/sCOP), Total_conso_bois, Total_conso_elec_reseau*Ratio_pertes*Frac_nucleaire, Total_conso_elec_reseau*Ratio_pertes*Frac_gaz, Total_conso_elec_reseau*Ratio_pertes*Frac_ENR_reseau, # + INJ Total_conso_elec_reseau, Total_conso_elec_reseau*(Ratio_pertes-1), Total_prod_PV, Total_conso_elec-Total_decharge_batterie, Total_charge_batterie, Total_revente_PV, ### Total_revente_PV, Total_decharge_batterie, Total_conso_gaz*rdt_chaud, Total_prod_thermique, Total_th_PAC*(1-1/sCOP), Total_conso_bois*rdt_insert*Frac_recup_bois, Total_thermique-Total_ECS,Total_ECS, Total_prod_thermique_piscine, Total_chauff_SdB, Total_conso_bois*rdt_insert*(1-Frac_recup_bois), Total_th_PAC/sCOP, Total_th_PAC, Total_conso_elec-Total_th_PAC/sCOP-Total_chauff_SdB-Total_pompe_piscine, Total_charge_batterie-Total_decharge_batterie, Total_conso_gaz*(1-rdt_chaud), Total_conso_bois*(1-rdt_insert), Total_pompe_piscine, Total_prod_thermique_piscine, Total_pompe_piscine ] })) sankey_plotly_rotex_piscine_builleur_pac_pv = pn.pane.Plotly(fig) scenarios[&#39;Combiné gaz condensation/solaire &amp; Piscine &amp; Bouilleur &amp; PAC &amp; PV&#39; ] = sankey_plotly_rotex_piscine_builleur_pac_pv filename = &#39;../_includes/sankey_plotly_rotex_piscine_builleur_pac_pv.html&#39; export_plot_fastpages(pn.panel(sankey_plotly_rotex_piscine_builleur_pac_pv), filename) sankey_plotly_rotex_piscine_builleur_pac_pv . sankey_plotly_rotex_piscine_builleur_pac_pv . R&#233;f&#233;rences . 1. This is the actual footnote↩ . 2. This is the actual footnote↩ . 3. This is the actual footnote↩ .",
            "url": "https://slamer59.github.io/energies-domestique/fastpages/jupytern%20sankey/2021/04/19/.~2021-04-19-Sankey_story-DP.html",
            "relUrl": "/fastpages/jupytern%20sankey/2021/04/19/.~2021-04-19-Sankey_story-DP.html",
            "date": " • Apr 19, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Test plotly diagram",
            "content": "import panel as pn pn.extension(&#39;plotly&#39;) import pandas as pd import time import requests # import hvplot.pandas from decouple import config from urllib.parse import urlparse import influxdb_client from influxdb_client.client.write_api import SYNCHRONOUS from snippets import * import plotly.graph_objs as go . Ratio_pertes = 2.58 Frac_nucleaire=0.65 Frac_ENR_reseau=0.25 Frac_gaz=1-Frac_ENR_reseau-Frac_nucleaire rdt_chaud=0.95 rdt_insert=0.75 #(0.90 sinon) PV_frac_autoconso = 1 nb_pers = 3 Total_chauff_SdB = 15200 Total_ECS = 600*nb_pers Total_pompe_piscine = 6*5*31*0.750 Total_conso_elec = 1100*nb_pers + Total_chauff_SdB + Total_ECS + Total_pompe_piscine Total_conso_elec_reseau = Total_conso_elec #*PV_frac_autoconso Part_PAC=0 Total_conso_gaz = 0*(1-Part_PAC) Total_conso_bois = 3500*0 Frac_recup_bois = 0 Total_prod_PV = 0 Total_revente_PV = (Total_prod_PV-Total_conso_elec*(1-PV_frac_autoconso)) Total_charge_batterie = Total_prod_PV *0.3*0 Total_decharge_batterie = Total_charge_batterie*0.85*0 Total_prod_thermique = 0 Total_prod_thermique_piscine = 0 Total_th_PAC = 10000*Part_PAC sCOP = 1.8*2.5 Total_thermique = Total_conso_gaz*rdt_chaud + Total_prod_thermique + Frac_recup_bois*Total_conso_bois + Total_th_PAC . test_plotly .",
            "url": "https://slamer59.github.io/energies-domestique/fastpages/jupytern%20sankey/2021/04/19/Test-plotly.html",
            "relUrl": "/fastpages/jupytern%20sankey/2021/04/19/Test-plotly.html",
            "date": " • Apr 19, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Sankey_story",
            "content": "100% Elec . Sur les différentes années de ce projet, la maison et son usage ont évolués, d&#39;un coté l&#39;isolation a été améliorée ponctuellement par certains travaux, d&#39;un autre coté la famille s&#39;est agrandie. Je fais le choix de figer les besoins de la maison en chauffage, ECS et électricité domestique afin de pouvoir comparer différentes configuration sur une base commune. . Par rapport au DPE, j&#39;ai considéré les besoins suivants: . Besoin en chauffage : 15 200 kWh annuel, soit +30% par rapport à l&#39;estimation du DPE initial. Cette valeur est estimée à partir du suivi de consommation des factures sur plusieurs années. Il est cependant difficile de suivre correctement la consommation de bois d&#39;une année sur l&#39;autre. L&#39;estimation du besoin du DPE est fait par rapport à une valeur de consigne de chauffage à 19°C 1, en pratique nous avons une température de consigne à 21°C. | Production d&#39;ECS 1800kWh annuel. Il est estimée à 600 kWh/personne/an 2, en considérant 2 adultes et 2 enfants, | Besoin en électricité domestique : 3998kWh annuel. Il est estimé à 1100 kWh/an/personne 3 soit 3300 kWh annuel pour 2 adultes et 2 enfants. Il faut ajouter la consommation spécifique de la piscine, en considérant 6 h de fonctionnement par jour pendant 5 mois et une puissance de pompe de 750 W, la consommation annuelle est de 697 kWh. Ces données sont cohérentes avec les consommations constatées sur plusieurs années. | . Je vais utiliser des diagrammes Sankey, en partant de la configuration la plus simple ou seule l&#39;électricité est utilisée pour répondre aux besoins de la maison: . Ratio_pertes = 2.58 Frac_nucleaire=0.65 Frac_ENR_reseau=0.25 Frac_gaz=1-Frac_ENR_reseau-Frac_nucleaire rdt_chaud=0.95 rdt_insert=0.75 #(0.90 sinon) PV_frac_autoconso = 1 nb_pers = 3 Total_chauff_SdB = 15200 Total_ECS = 600*nb_pers Total_pompe_piscine = 6*5*31*0.750 Total_conso_elec = 1100*nb_pers + Total_chauff_SdB + Total_ECS + Total_pompe_piscine Total_conso_elec_reseau = Total_conso_elec #*PV_frac_autoconso Part_PAC=0 Total_conso_gaz = 0*(1-Part_PAC) Total_conso_bois = 3500*0 Frac_recup_bois = 0 Total_prod_PV = 0 Total_revente_PV = (Total_prod_PV-Total_conso_elec*(1-PV_frac_autoconso)) Total_charge_batterie = Total_prod_PV *0.3*0 Total_decharge_batterie = Total_charge_batterie*0.85*0 Total_prod_thermique = 0 Total_prod_thermique_piscine = 0 Total_th_PAC = 10000*Part_PAC sCOP = 1.8*2.5 Total_thermique = Total_conso_gaz*rdt_chaud + Total_prod_thermique + Frac_recup_bois*Total_conso_bois + Total_th_PAC . sankey_plotly_elec . Elec + Bois . sankey_plotly_elec_bois . Rotex . sankey_plotly_rotex . Rotex gaz uniquement . sankey_plotly_rotex_gaz . Rotex + piscine . sankey_plotly_rotex_piscine . Rotex + piscine + bouilleur . sankey_plotly_rotex_piscine_builleur . Rotex + piscine + bouilleur + PAC . sankey_plotly_rotex_piscine_builleur_pac . Rotex + piscine + bouilleur + PAC + PV . sankey_plotly_rotex_piscine_builleur_pac_pv . Comparaison . Panel . R&#233;f&#233;rences . 1. This is the actual footnote↩ . 2. This is the actual footnote↩ . 3. This is the actual footnote↩ .",
            "url": "https://slamer59.github.io/energies-domestique/fastpages/jupytern%20sankey/2021/04/19/Sankey_story-DP.html",
            "relUrl": "/fastpages/jupytern%20sankey/2021/04/19/Sankey_story-DP.html",
            "date": " • Apr 19, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Introducing fastpages with hvplot",
            "content": "//|&gt; filter(fn: (r) =&gt; r[&quot;_measurement&quot;] == &quot;solarmanpv&quot;) // |&gt; filter(fn: (r) =&gt; r[&quot;_field&quot;] == &quot;Courant DC PV1&quot; or r[&quot;_field&quot;] == &quot;Courant DC PV2&quot;) . query_api = client.query_api() query = &#39;&#39;&#39;from(bucket: &quot;energie&quot;) |&gt; range(start: -1d) |&gt; filter(fn: (r) =&gt; r[&quot;_field&quot;] == &quot;W&quot;) |&gt; yield(name: &quot;mean&quot;)&#39;&#39;&#39; result = client.query_api().query_data_frame(org=ORG, query=query) result.columns = [&#39;result&#39;, &#39;table&#39;, &#39;start&#39;, &#39;stop&#39;, &#39;time&#39;, &#39;value&#39;, &#39;field&#39;, &#39;measurement&#39;, &#39;host&#39;, &#39;topic&#39;] df = result.head(20)[[&#39;time&#39;,&#39;value&#39;]] df = df.set_index(&#39;time&#39;) . df.hvplot() . import numpy as np from bokeh.models import Range1d, LinearAxis interval = &#39;60S&#39; interval = str((df.index.max() - df.index.min()).seconds + 1) + &quot;S&quot; def apply_formatter(plot, element): p = plot.state # create secondary range and axis p.extra_y_ranges = {&quot;twiny&quot;: Range1d(start=0, end=1)} p.add_layout(LinearAxis(y_range_name=&quot;twiny&quot;), &#39;left&#39;) # set glyph y_range_name to the one we&#39;ve just created glyph = p.select(dict(type=GlyphRenderer))[0] glyph.y_range_name = &#39;twiny&#39; def apply_formatter(plot, element): p = plot.state # create secondary range and axis p.extra_y_ranges = {&quot;twiny&quot;: Range1d(start=0, end=35)} p.add_layout(LinearAxis(y_range_name=&quot;twiny&quot;), &#39;right&#39;) # set glyph y_range_name to the one we&#39;ve just created glyph = p.select(dict(type=GlyphRenderer))[0] glyph.y_range_name = &#39;twiny&#39; df.hvplot(yaxis=&quot;left&quot;).opts(hooks=[apply_formatter]) * df.rolling(interval).apply(np.trapz).hvplot(yaxis=&quot;right&quot;) . WARNING:param.CurvePlot19219: Plotting hook &lt;function apply_formatter at 0x7f08f594a4c0&gt; could not be applied: name &#39;GlyphRenderer&#39; is not defined . (df.hvplot() ) #+ df.rolling(interval).apply(np.trapz).hvplot()).cols(1) .",
            "url": "https://slamer59.github.io/energies-domestique/fastpages/jupyter/2021/04/18/Ajout-donn%C3%A9es-irr%C3%A9guli%C3%A8res-+-integrale.html",
            "relUrl": "/fastpages/jupyter/2021/04/18/Ajout-donn%C3%A9es-irr%C3%A9guli%C3%A8res-+-integrale.html",
            "date": " • Apr 18, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "Test plotly diagram",
            "content": "import panel as pn pn.extension(&#39;plotly&#39;) import pandas as pd import time import requests # import hvplot.pandas from decouple import config from urllib.parse import urlparse import influxdb_client from influxdb_client.client.write_api import SYNCHRONOUS from snippets import * import plotly.graph_objs as go . Ratio_pertes = 2.58 Frac_nucleaire=0.65 Frac_ENR_reseau=0.25 Frac_gaz=1-Frac_ENR_reseau-Frac_nucleaire rdt_chaud=0.95 rdt_insert=0.75 #(0.90 sinon) PV_frac_autoconso = 1 nb_pers = 3 Total_chauff_SdB = 15200 Total_ECS = 600*nb_pers Total_pompe_piscine = 6*5*31*0.750 Total_conso_elec = 1100*nb_pers + Total_chauff_SdB + Total_ECS + Total_pompe_piscine Total_conso_elec_reseau = Total_conso_elec #*PV_frac_autoconso Part_PAC=0 Total_conso_gaz = 0*(1-Part_PAC) Total_conso_bois = 3500*0 Frac_recup_bois = 0 Total_prod_PV = 0 Total_revente_PV = (Total_prod_PV-Total_conso_elec*(1-PV_frac_autoconso)) Total_charge_batterie = Total_prod_PV *0.3*0 Total_decharge_batterie = Total_charge_batterie*0.85*0 Total_prod_thermique = 0 Total_prod_thermique_piscine = 0 Total_th_PAC = 10000*Part_PAC sCOP = 1.8*2.5 Total_thermique = Total_conso_gaz*rdt_chaud + Total_prod_thermique + Frac_recup_bois*Total_conso_bois + Total_th_PAC . test_plotly .",
            "url": "https://slamer59.github.io/energies-domestique/fastpages/jupytern%20sankey/2021/04/18/Test-plotly.html",
            "relUrl": "/fastpages/jupytern%20sankey/2021/04/18/Test-plotly.html",
            "date": " • Apr 18, 2021"
        }
        
    
  
    
        ,"post7": {
            "title": "Sankey_story",
            "content": "100% Elec . Sur les différentes années de ce projet, la maison et son usage ont évolués, d&#39;un coté l&#39;isolation a été améliorée ponctuellement par certains travaux, d&#39;un autre coté la famille s&#39;est agrandie. Je fais le choix de figer les besoins de la maison en chauffage, ECS et électricité domestique afin de pouvoir comparer différentes configuration sur une base commune. . Par rapport au DPE, j&#39;ai considéré les besoins suivants: . Besoin en chauffage : 15 200 kWh annuel, soit +30% par rapport à l&#39;estimation du DPE initial. Cette valeur est estimée à partir du suivi de consommation des factures sur plusieurs années. Il est cependant difficile de suivre correctement la consommation de bois d&#39;une année sur l&#39;autre. L&#39;estimation du besoin du DPE est fait par rapport à une valeur de consigne de chauffage à 19°C 1, en pratique nous avons une température de consigne à 21°C. | Production d&#39;ECS 1800kWh annuel. Il est estimée à 600 kWh/personne/an 2, en considérant 2 adultes et 2 enfants, | Besoin en électricité domestique : 3998kWh annuel. Il est estimé à 1100 kWh/an/personne 3 soit 3300 kWh annuel pour 2 adultes et 2 enfants. Il faut ajouter la consommation spécifique de la piscine, en considérant 6 h de fonctionnement par jour pendant 5 mois et une puissance de pompe de 750 W, la consommation annuelle est de 697 kWh. Ces données sont cohérentes avec les consommations constatées sur plusieurs années. | . Je vais utiliser des diagrammes Sankey, en partant de la configuration la plus simple ou seule l&#39;électricité est utilisée pour répondre aux besoins de la maison: . Ratio_pertes = 2.58 Frac_nucleaire=0.65 Frac_ENR_reseau=0.25 Frac_gaz=1-Frac_ENR_reseau-Frac_nucleaire rdt_chaud=0.95 rdt_insert=0.75 #(0.90 sinon) PV_frac_autoconso = 1 nb_pers = 3 Total_chauff_SdB = 15200 Total_ECS = 600*nb_pers Total_pompe_piscine = 6*5*31*0.750 Total_conso_elec = 1100*nb_pers + Total_chauff_SdB + Total_ECS + Total_pompe_piscine Total_conso_elec_reseau = Total_conso_elec #*PV_frac_autoconso Part_PAC=0 Total_conso_gaz = 0*(1-Part_PAC) Total_conso_bois = 3500*0 Frac_recup_bois = 0 Total_prod_PV = 0 Total_revente_PV = (Total_prod_PV-Total_conso_elec*(1-PV_frac_autoconso)) Total_charge_batterie = Total_prod_PV *0.3*0 Total_decharge_batterie = Total_charge_batterie*0.85*0 Total_prod_thermique = 0 Total_prod_thermique_piscine = 0 Total_th_PAC = 10000*Part_PAC sCOP = 1.8*2.5 Total_thermique = Total_conso_gaz*rdt_chaud + Total_prod_thermique + Frac_recup_bois*Total_conso_bois + Total_th_PAC . sankey_plotly_elec . Elec + Bois . import plotly.graph_objects as go Ratio_pertes = 2.58 Frac_nucleaire=0.65 Frac_ENR_reseau=0.25 Frac_gaz=1-Frac_ENR_reseau-Frac_nucleaire rdt_chaud=0.95 rdt_insert=0.75 #(0.90 sinon) PV_frac_autoconso = 1 nb_pers = 3 Total_conso_bois = 3500 Total_chauff_SdB = 15200 - Total_conso_bois*rdt_insert Total_ECS = 600*nb_pers Total_pompe_piscine = 6*5*31*0.750 Total_conso_elec = 1100*nb_pers + Total_chauff_SdB + Total_ECS + Total_pompe_piscine Total_conso_elec_reseau = Total_conso_elec #*PV_frac_autoconso Part_PAC=0 Total_conso_gaz = 0*(1-Part_PAC) Frac_recup_bois = 0 Total_prod_PV = 0 Total_revente_PV = (Total_prod_PV-Total_conso_elec*(1-PV_frac_autoconso)) Total_charge_batterie = Total_prod_PV *0.3*0 Total_decharge_batterie = Total_charge_batterie*0.85*0 Total_prod_thermique = 0 Total_prod_thermique_piscine = 0 Total_th_PAC = 10000*Part_PAC sCOP = 1.8*2.5 Total_thermique = Total_conso_gaz*rdt_chaud + Total_prod_thermique + Frac_recup_bois*Total_conso_bois + Total_th_PAC fig = go.Figure(go.Sankey( arrangement = &quot;snap&quot;, textfont=dict(color=&quot;black&quot;, size=25), node = { &quot;label&quot;: [&quot;Non renouvelable&quot;, # 0 &quot;ENR&quot;, # 1 &quot;Nucléaire&quot;, # 2 &quot;Gaz&quot;, # 3 &quot;ENR Réseau&quot;, # 4 &quot;Photovoltaïque&quot;, # 5 &quot;Solaire thermique&quot;, # 6 &quot;Air (PAC)&quot;, # 7 &quot;Bois&quot;, # 8 &quot;Electricité Réseau&quot;, # 9 &quot;Pertes&quot;, # 10 &quot;Electricité domestique&quot;, # 11 &quot;Usage direct&quot;, # 12 &quot;Batterie&quot;, # 13 &quot;Revente&quot;, # 14 &quot;Prod eau chaude&quot;, # 15 &quot;Chauffage&quot;, # 16 &quot;ECS&quot;, # 17 &quot;Chauffage piscine&quot;, # 18 &quot;PAC&quot;, # 19 &quot;Autre&quot;, # 20 &quot;Piscine&quot;, # 21 &quot;Piscine&quot; # 22 ], # &quot;x&quot;: [0.2, 0.1, 0.5, 0.7, 0.3, 0.5], # &quot;y&quot;: [0.7, 0.5, 0.2, 0.4, 0.2, 0.3], &#39;pad&#39;:20}, # 10 Pixels link = { &quot;source&quot;: [0, 0, 1, 1, 1, 1, 1, 2, 3, 4, 9,9, 5, 11,11,11, 14, 13, 3, 6, 7, 8, 15,12, 6, 12, 8, 12, 19, 12, 13, 3, 8, 12, 18, 21 ], &quot;target&quot;: [2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 12,10, 11, 12,13,14, 4, 12, 15, 15, 19, 15, 16,17, 18, 16, 16, 19, 15, 20, 10, 10, 10, 21, 22, 22 ], &quot;value&quot;: [Total_conso_elec_reseau*Ratio_pertes*Frac_nucleaire, Total_conso_elec_reseau*Ratio_pertes*Frac_gaz+ Total_conso_gaz, Total_conso_elec_reseau*Ratio_pertes*Frac_ENR_reseau, Total_prod_PV, Total_prod_thermique+Total_prod_thermique_piscine, Total_th_PAC*(1-1/sCOP), Total_conso_bois, Total_conso_elec_reseau*Ratio_pertes*Frac_nucleaire, Total_conso_elec_reseau*Ratio_pertes*Frac_gaz, Total_conso_elec_reseau*Ratio_pertes*Frac_ENR_reseau, # + INJ Total_conso_elec_reseau, Total_conso_elec_reseau*(Ratio_pertes-1), Total_prod_PV, Total_conso_elec*0-Total_decharge_batterie*0, Total_charge_batterie, Total_revente_PV, ### Total_revente_PV, Total_decharge_batterie, Total_conso_gaz*rdt_chaud, Total_prod_thermique, Total_th_PAC*(1-1/sCOP), Total_conso_bois*rdt_insert*Frac_recup_bois, Total_thermique-Total_ECS,Total_ECS, Total_prod_thermique_piscine, Total_chauff_SdB, Total_conso_bois*rdt_insert*(1-Frac_recup_bois), Total_th_PAC/sCOP, Total_th_PAC, Total_conso_elec-Total_th_PAC/sCOP-Total_chauff_SdB-Total_pompe_piscine -Total_ECS, Total_charge_batterie-Total_decharge_batterie, Total_conso_gaz*(1-rdt_chaud), Total_conso_bois*(1-rdt_insert), Total_pompe_piscine, Total_prod_thermique_piscine, Total_pompe_piscine*0 ] })) sankey_plotly_elec_bois = pn.pane.Plotly(fig) filename = &#39;../_includes/sankey_plotly_elec_bois.html&#39; export_plot_fastpages(pn.panel(sankey_plotly_elec_bois), filename) . sankey_plotly_elec_bois . Rotex . import plotly.graph_objects as go Ratio_pertes = 2.58 Frac_nucleaire=0.65 Frac_ENR_reseau=0.25 Frac_gaz=1-Frac_ENR_reseau-Frac_nucleaire rdt_chaud=0.95 rdt_insert=0.75 #(0.90 sinon) PV_frac_autoconso = 1 nb_pers = 3 Total_conso_bois = 3500 Total_chauff_SdB = 200 Total_ECS = 600*nb_pers Total_pompe_piscine = 6*5*31*0.750 Total_conso_elec = 1100*nb_pers + Total_chauff_SdB + Total_pompe_piscine Total_conso_elec_reseau = Total_conso_elec*PV_frac_autoconso Part_PAC=0 Total_prod_thermique = 3000 Total_conso_gaz = (15200 - Total_conso_bois*rdt_insert - Total_chauff_SdB - Total_prod_thermique )*(1-Part_PAC)+ Total_ECS Frac_recup_bois = 0.3*0 Total_prod_PV = 5900*0 Total_revente_PV = (Total_prod_PV-Total_conso_elec*(1-PV_frac_autoconso))*0 Total_charge_batterie = Total_prod_PV *0.3*0 Total_decharge_batterie = Total_charge_batterie*0.85*0 Total_prod_thermique_piscine = 3800*0 Total_th_PAC = (15200 - Total_conso_bois*rdt_insert - Total_chauff_SdB )*Part_PAC sCOP = 1.8*2.5 Total_thermique = Total_conso_gaz*rdt_chaud + Total_prod_thermique + Frac_recup_bois*Total_conso_bois + Total_th_PAC fig = go.Figure(go.Sankey( arrangement = &quot;snap&quot;, textfont=dict(color=&quot;black&quot;, size=25), node = { &quot;label&quot;: [&quot;Non renouvelable&quot;, # 0 &quot;ENR&quot;, # 1 &quot;Nucléaire&quot;, # 2 &quot;Gaz&quot;, # 3 &quot;ENR Réseau&quot;, # 4 &quot;Photovoltaïque&quot;, # 5 &quot;Solaire thermique&quot;, # 6 &quot;Air (PAC)&quot;, # 7 &quot;Bois&quot;, # 8 &quot;Electricité Réseau&quot;, # 9 &quot;Pertes&quot;, # 10 &quot;Electricité domestique&quot;, # 11 &quot;Usage direct&quot;, # 12 &quot;Batterie&quot;, # 13 &quot;Revente&quot;, # 14 &quot;Prod eau chaude&quot;, # 15 &quot;Chauffage&quot;, # 16 &quot;ECS&quot;, # 17 &quot;Chauffage piscine&quot;, # 18 &quot;PAC&quot;, # 19 &quot;Autre&quot;, # 20 &quot;Piscine&quot;, # 21 &quot;Piscine&quot; # 22 ], # &quot;x&quot;: [0.2, 0.1, 0.5, 0.7, 0.3, 0.5], # &quot;y&quot;: [0.7, 0.5, 0.2, 0.4, 0.2, 0.3], &#39;pad&#39;:20}, # 10 Pixels link = { &quot;source&quot;: [0, 0, 1, 1, 1, 1, 1, 2, 3, 4, 9,9, 5, 11,11,11, 14, 13, 3, 6, 7, 8, 15,15, 6, 12, 8, 12, 19, 12, 13, 3, 8, 12, 18, 21 ], &quot;target&quot;: [2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 12,10, 11, 12,13,14, 4, 12, 15, 15, 19, 15, 16,17, 18, 16, 16, 19, 15, 20, 10, 10, 10, 21, 22, 22 ], &quot;value&quot;: [Total_conso_elec_reseau*Ratio_pertes*Frac_nucleaire, Total_conso_elec_reseau*Ratio_pertes*Frac_gaz+ Total_conso_gaz, Total_conso_elec_reseau*Ratio_pertes*Frac_ENR_reseau, Total_prod_PV, Total_prod_thermique+Total_prod_thermique_piscine, Total_th_PAC*(1-1/sCOP), Total_conso_bois, Total_conso_elec_reseau*Ratio_pertes*Frac_nucleaire, Total_conso_elec_reseau*Ratio_pertes*Frac_gaz, Total_conso_elec_reseau*Ratio_pertes*Frac_ENR_reseau, # + INJ Total_conso_elec_reseau, Total_conso_elec_reseau*(Ratio_pertes-1), Total_prod_PV, Total_conso_elec*0-Total_decharge_batterie, Total_charge_batterie, Total_revente_PV, ### Total_revente_PV, Total_decharge_batterie, Total_conso_gaz*rdt_chaud, Total_prod_thermique, Total_th_PAC*(1-1/sCOP), Total_conso_bois*rdt_insert*Frac_recup_bois, Total_thermique-Total_ECS,Total_ECS, Total_prod_thermique_piscine, Total_chauff_SdB, Total_conso_bois*rdt_insert*(1-Frac_recup_bois), Total_th_PAC/sCOP, Total_th_PAC, Total_conso_elec-Total_th_PAC/sCOP-Total_chauff_SdB-Total_pompe_piscine, Total_charge_batterie-Total_decharge_batterie, Total_conso_gaz*(1-rdt_chaud), Total_conso_bois*(1-rdt_insert), Total_pompe_piscine, Total_prod_thermique_piscine, Total_pompe_piscine*0 ] })) sankey_plotly_rotex = pn.pane.Plotly(fig) filename = &#39;../_includes/sankey_plotly_rotex.html&#39; export_plot_fastpages(pn.panel(sankey_plotly_rotex), filename) . sankey_plotly_rotex . Rotex gaz uniquement . import plotly.graph_objects as go Ratio_pertes = 2.58 Frac_nucleaire=0.65 Frac_ENR_reseau=0.25 Frac_gaz=1-Frac_ENR_reseau-Frac_nucleaire rdt_chaud=0.95 rdt_insert=0.75 #(0.90 sinon) PV_frac_autoconso = 1 nb_pers = 3 Total_conso_bois = 3500 Total_chauff_SdB = 200 Total_ECS = 600*nb_pers Total_pompe_piscine = 6*5*31*0.750 Total_conso_elec = 1100*nb_pers + Total_chauff_SdB + Total_pompe_piscine Total_conso_elec_reseau = Total_conso_elec*PV_frac_autoconso Part_PAC=0 Total_prod_thermique = 3000*0 Total_conso_gaz = (15200 - Total_conso_bois*rdt_insert - Total_chauff_SdB - Total_prod_thermique )*(1-Part_PAC)+ Total_ECS Frac_recup_bois = 0.3*0 Total_prod_PV = 5900*0 Total_revente_PV = (Total_prod_PV-Total_conso_elec*(1-PV_frac_autoconso))*0 Total_charge_batterie = Total_prod_PV *0.3*0 Total_decharge_batterie = Total_charge_batterie*0.85*0 Total_prod_thermique_piscine = 3800*0 Total_th_PAC = (15200 - Total_conso_bois*rdt_insert - Total_chauff_SdB )*Part_PAC sCOP = 1.8*2.5 Total_thermique = Total_conso_gaz*rdt_chaud + Total_prod_thermique + Frac_recup_bois*Total_conso_bois + Total_th_PAC fig = go.Figure(go.Sankey( arrangement = &quot;snap&quot;, textfont=dict(color=&quot;black&quot;, size=25), node = { &quot;label&quot;: [&quot;Non renouvelable&quot;, # 0 &quot;ENR&quot;, # 1 &quot;Nucléaire&quot;, # 2 &quot;Gaz&quot;, # 3 &quot;ENR Réseau&quot;, # 4 &quot;Photovoltaïque&quot;, # 5 &quot;Solaire thermique&quot;, # 6 &quot;Air (PAC)&quot;, # 7 &quot;Bois&quot;, # 8 &quot;Electricité Réseau&quot;, # 9 &quot;Pertes&quot;, # 10 &quot;Electricité domestique&quot;, # 11 &quot;Usage direct&quot;, # 12 &quot;Batterie&quot;, # 13 &quot;Revente&quot;, # 14 &quot;Prod eau chaude&quot;, # 15 &quot;Chauffage&quot;, # 16 &quot;ECS&quot;, # 17 &quot;Chauffage piscine&quot;, # 18 &quot;PAC&quot;, # 19 &quot;Autre&quot;, # 20 &quot;Piscine&quot;, # 21 &quot;Piscine&quot; # 22 ], # &quot;x&quot;: [0.2, 0.1, 0.5, 0.7, 0.3, 0.5], # &quot;y&quot;: [0.7, 0.5, 0.2, 0.4, 0.2, 0.3], &#39;pad&#39;:20}, # 10 Pixels link = { &quot;source&quot;: [0, 0, 1, 1, 1, 1, 1, 2, 3, 4, 9,9, 5, 11,11,11, 14, 13, 3, 6, 7, 8, 15,15, 6, 12, 8, 12, 19, 12, 13, 3, 8, 12, 18, 21 ], &quot;target&quot;: [2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 12,10, 11, 12,13,14, 4, 12, 15, 15, 19, 15, 16,17, 18, 16, 16, 19, 15, 20, 10, 10, 10, 21, 22, 22 ], &quot;value&quot;: [Total_conso_elec_reseau*Ratio_pertes*Frac_nucleaire, Total_conso_elec_reseau*Ratio_pertes*Frac_gaz+ Total_conso_gaz, Total_conso_elec_reseau*Ratio_pertes*Frac_ENR_reseau, Total_prod_PV, Total_prod_thermique+Total_prod_thermique_piscine, Total_th_PAC*(1-1/sCOP), Total_conso_bois, Total_conso_elec_reseau*Ratio_pertes*Frac_nucleaire, Total_conso_elec_reseau*Ratio_pertes*Frac_gaz, Total_conso_elec_reseau*Ratio_pertes*Frac_ENR_reseau, # + INJ Total_conso_elec_reseau, Total_conso_elec_reseau*(Ratio_pertes-1), Total_prod_PV, Total_conso_elec*0-Total_decharge_batterie, Total_charge_batterie, Total_revente_PV, ### Total_revente_PV, Total_decharge_batterie, Total_conso_gaz*rdt_chaud, Total_prod_thermique, Total_th_PAC*(1-1/sCOP), Total_conso_bois*rdt_insert*Frac_recup_bois, Total_thermique-Total_ECS,Total_ECS, Total_prod_thermique_piscine, Total_chauff_SdB, Total_conso_bois*rdt_insert*(1-Frac_recup_bois), Total_th_PAC/sCOP, Total_th_PAC, Total_conso_elec-Total_th_PAC/sCOP-Total_chauff_SdB-Total_pompe_piscine, Total_charge_batterie-Total_decharge_batterie, Total_conso_gaz*(1-rdt_chaud), Total_conso_bois*(1-rdt_insert), Total_pompe_piscine, Total_prod_thermique_piscine, Total_pompe_piscine*0 ] })) sankey_plotly_rotex_gaz = pn.pane.Plotly(fig) filename = &#39;../_includes/sankey_plotly_rotex_gaz.html&#39; export_plot_fastpages(pn.panel(sankey_plotly_rotex_gaz), filename) . sankey_plotly_rotex_gaz . Rotex + piscine . import plotly.graph_objects as go Ratio_pertes = 2.58 Frac_nucleaire=0.65 Frac_ENR_reseau=0.25 Frac_gaz=1-Frac_ENR_reseau-Frac_nucleaire rdt_chaud=0.95 rdt_insert=0.75 #(0.90 sinon) PV_frac_autoconso = 1 nb_pers = 3 Total_conso_bois = 3500 Total_chauff_SdB = 200 Total_ECS = 600*nb_pers Total_pompe_piscine = 6*5*31*0.750 Total_conso_elec = 1100*nb_pers + Total_chauff_SdB + Total_pompe_piscine Total_conso_elec_reseau = Total_conso_elec*PV_frac_autoconso Part_PAC=0 Total_prod_thermique = 3000 Total_conso_gaz = (15200 - Total_conso_bois*rdt_insert - Total_chauff_SdB - Total_prod_thermique)*(1-Part_PAC) + Total_ECS Frac_recup_bois = 0.3*0 Total_prod_PV = 5900*0 Total_revente_PV = (Total_prod_PV-Total_conso_elec*(1-PV_frac_autoconso))*0 Total_charge_batterie = Total_prod_PV *0.3*0 Total_decharge_batterie = Total_charge_batterie*0.85*0 Total_prod_thermique_piscine = 3800 Total_th_PAC = (15200 - Total_conso_bois*rdt_insert - Total_chauff_SdB )*Part_PAC sCOP = 1.8*2.5 Total_thermique = Total_conso_gaz*rdt_chaud + Total_prod_thermique + Frac_recup_bois*Total_conso_bois + Total_th_PAC fig = go.Figure(go.Sankey( arrangement = &quot;snap&quot;, textfont=dict(color=&quot;black&quot;, size=25), node = { &quot;label&quot;: [&quot;Non renouvelable&quot;, # 0 &quot;ENR&quot;, # 1 &quot;Nucléaire&quot;, # 2 &quot;Gaz&quot;, # 3 &quot;ENR Réseau&quot;, # 4 &quot;Photovoltaïque&quot;, # 5 &quot;Solaire thermique&quot;, # 6 &quot;Air (PAC)&quot;, # 7 &quot;Bois&quot;, # 8 &quot;Electricité Réseau&quot;, # 9 &quot;Pertes&quot;, # 10 &quot;Electricité domestique&quot;, # 11 &quot;Usage direct&quot;, # 12 &quot;Batterie&quot;, # 13 &quot;Revente&quot;, # 14 &quot;Prod eau chaude&quot;, # 15 &quot;Chauffage&quot;, # 16 &quot;ECS&quot;, # 17 &quot;Chauffage piscine&quot;, # 18 &quot;PAC&quot;, # 19 &quot;Autre&quot;, # 20 &quot;Pompe Piscine&quot;, # 21 &quot;Piscine&quot; # 22 ], # &quot;x&quot;: [0.2, 0.1, 0.5, 0.7, 0.3, 0.5], # &quot;y&quot;: [0.7, 0.5, 0.2, 0.4, 0.2, 0.3], &#39;pad&#39;:40}, # 10 Pixels link = { &quot;source&quot;: [0, 0, 1, 1, 1, 1, 1, 2, 3, 4, 9,9, 5, 11,11,11, 14, 13, 3, 6, 7, 8, 15,15, 6, 12, 8, 12, 19, 12, 13, 3, 8, 12, 18, 21 ], &quot;target&quot;: [2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 12,10, 11, 12,13,14, 4, 12, 15, 15, 19, 15, 16,17, 18, 16, 16, 19, 15, 20, 10, 10, 10, 21, 22, 22 ], &quot;value&quot;: [Total_conso_elec_reseau*Ratio_pertes*Frac_nucleaire, Total_conso_elec_reseau*Ratio_pertes*Frac_gaz+ Total_conso_gaz, Total_conso_elec_reseau*Ratio_pertes*Frac_ENR_reseau, Total_prod_PV, Total_prod_thermique+Total_prod_thermique_piscine, Total_th_PAC*(1-1/sCOP), Total_conso_bois, Total_conso_elec_reseau*Ratio_pertes*Frac_nucleaire, Total_conso_elec_reseau*Ratio_pertes*Frac_gaz, Total_conso_elec_reseau*Ratio_pertes*Frac_ENR_reseau, # + INJ Total_conso_elec_reseau, Total_conso_elec_reseau*(Ratio_pertes-1), Total_prod_PV, Total_conso_elec*0-Total_decharge_batterie, Total_charge_batterie, Total_revente_PV, ### Total_revente_PV, Total_decharge_batterie, Total_conso_gaz*rdt_chaud, Total_prod_thermique, Total_th_PAC*(1-1/sCOP), Total_conso_bois*rdt_insert*Frac_recup_bois, Total_thermique-Total_ECS,Total_ECS, Total_prod_thermique_piscine, Total_chauff_SdB, Total_conso_bois*rdt_insert*(1-Frac_recup_bois), Total_th_PAC/sCOP, Total_th_PAC, Total_conso_elec-Total_th_PAC/sCOP-Total_chauff_SdB-Total_pompe_piscine, Total_charge_batterie-Total_decharge_batterie, Total_conso_gaz*(1-rdt_chaud), Total_conso_bois*(1-rdt_insert), Total_pompe_piscine, Total_prod_thermique_piscine, Total_pompe_piscine ] })) sankey_plotly_rotex_piscine = pn.pane.Plotly(fig) filename = &#39;../_includes/sankey_plotly_rotex_piscine.html&#39; export_plot_fastpages(pn.panel(sankey_plotly_rotex_piscine), filename) . sankey_plotly_rotex_piscine . Rotex + piscine + bouilleur . import plotly.graph_objects as go Ratio_pertes = 2.58 Frac_nucleaire=0.65 Frac_ENR_reseau=0.25 Frac_gaz=1-Frac_ENR_reseau-Frac_nucleaire rdt_chaud=0.95 rdt_insert=0.90 PV_frac_autoconso = 1 nb_pers = 3 Total_conso_bois = 3500 Total_chauff_SdB = 200 Total_ECS = 600*nb_pers Total_pompe_piscine = 6*5*31*0.750 Total_conso_elec = 1100*nb_pers + Total_chauff_SdB + Total_pompe_piscine Total_conso_elec_reseau = Total_conso_elec*PV_frac_autoconso Part_PAC=0 Total_prod_thermique = 3000 Total_conso_gaz = (15200 - Total_conso_bois*rdt_insert - Total_chauff_SdB - Total_prod_thermique)*(1-Part_PAC)+ Total_ECS Frac_recup_bois = 0.3 Total_prod_PV = 5900*0 Total_revente_PV = (Total_prod_PV-Total_conso_elec*(1-PV_frac_autoconso))*0 Total_charge_batterie = Total_prod_PV *0.3*0 Total_decharge_batterie = Total_charge_batterie*0.85*0 Total_prod_thermique_piscine = 3800 Total_th_PAC = (15200 - Total_conso_bois*rdt_insert - Total_chauff_SdB)*Part_PAC sCOP = 1.8*2.5 Total_thermique = Total_conso_gaz*rdt_chaud + Total_prod_thermique + Frac_recup_bois*Total_conso_bois + Total_th_PAC fig = go.Figure(go.Sankey( arrangement = &quot;snap&quot;, textfont=dict(color=&quot;black&quot;, size=25), node = { &quot;label&quot;: [&quot;Non renouvelable&quot;, # 0 &quot;ENR&quot;, # 1 &quot;Nucléaire&quot;, # 2 &quot;Gaz&quot;, # 3 &quot;ENR Réseau&quot;, # 4 &quot;Photovoltaïque&quot;, # 5 &quot;Solaire thermique&quot;, # 6 &quot;Air (PAC)&quot;, # 7 &quot;Bois&quot;, # 8 &quot;Electricité Réseau&quot;, # 9 &quot;Pertes&quot;, # 10 &quot;Electricité domestique&quot;, # 11 &quot;Usage direct&quot;, # 12 &quot;Batterie&quot;, # 13 &quot;Revente&quot;, # 14 &quot;Prod eau chaude&quot;, # 15 &quot;Chauffage&quot;, # 16 &quot;ECS&quot;, # 17 &quot;Chauffage piscine&quot;, # 18 &quot;PAC&quot;, # 19 &quot;Autre&quot;, # 20 &quot;Pompe Piscine&quot;, # 21 &quot;Piscine&quot; # 22 ], # &quot;x&quot;: [0.2, 0.1, 0.5, 0.7, 0.3, 0.5], # &quot;y&quot;: [0.7, 0.5, 0.2, 0.4, 0.2, 0.3], &#39;pad&#39;:40}, # 10 Pixels link = { &quot;source&quot;: [0, 0, 1, 1, 1, 1, 1, 2, 3, 4, 9,9, 5, 11,11,11, 14, 13, 3, 6, 7, 8, 15,15, 6, 12, 8, 12, 19, 12, 13, 3, 8, 12, 18, 21 ], &quot;target&quot;: [2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 12,10, 11, 12,13,14, 4, 12, 15, 15, 19, 15, 16,17, 18, 16, 16, 19, 15, 20, 10, 10, 10, 21, 22, 22 ], &quot;value&quot;: [Total_conso_elec_reseau*Ratio_pertes*Frac_nucleaire, Total_conso_elec_reseau*Ratio_pertes*Frac_gaz+ Total_conso_gaz, Total_conso_elec_reseau*Ratio_pertes*Frac_ENR_reseau, Total_prod_PV, Total_prod_thermique+Total_prod_thermique_piscine, Total_th_PAC*(1-1/sCOP), Total_conso_bois, Total_conso_elec_reseau*Ratio_pertes*Frac_nucleaire, Total_conso_elec_reseau*Ratio_pertes*Frac_gaz, Total_conso_elec_reseau*Ratio_pertes*Frac_ENR_reseau, # + INJ Total_conso_elec_reseau, Total_conso_elec_reseau*(Ratio_pertes-1), Total_prod_PV, Total_conso_elec*0-Total_decharge_batterie, Total_charge_batterie, Total_revente_PV, ### Total_revente_PV, Total_decharge_batterie, Total_conso_gaz*rdt_chaud, Total_prod_thermique, Total_th_PAC*(1-1/sCOP), Total_conso_bois*rdt_insert*Frac_recup_bois, Total_thermique-Total_ECS,Total_ECS, Total_prod_thermique_piscine, Total_chauff_SdB, Total_conso_bois*rdt_insert*(1-Frac_recup_bois), Total_th_PAC/sCOP, Total_th_PAC, Total_conso_elec-Total_th_PAC/sCOP-Total_chauff_SdB-Total_pompe_piscine, Total_charge_batterie-Total_decharge_batterie, Total_conso_gaz*(1-rdt_chaud), Total_conso_bois*(1-rdt_insert), Total_pompe_piscine, Total_prod_thermique_piscine, Total_pompe_piscine ] })) sankey_plotly_rotex_piscine_builleur = pn.pane.Plotly(fig) filename = &#39;../_includes/sankey_plotly_rotex_piscine_builleur.html&#39; export_plot_fastpages(pn.panel(sankey_plotly_rotex_piscine_builleur), filename) . sankey_plotly_rotex_piscine_builleur . Rotex + piscine + bouilleur + PAC . import plotly.graph_objects as go Ratio_pertes = 2.58 Frac_nucleaire=0.65 Frac_ENR_reseau=0.25 Frac_gaz=1-Frac_ENR_reseau-Frac_nucleaire rdt_chaud=0.95 rdt_insert=0.90 PV_frac_autoconso = 1 nb_pers = 3 Total_conso_bois = 3500 Total_chauff_SdB = 200 Total_ECS = 600*nb_pers Total_pompe_piscine = 6*5*31*0.750 alpha=0.77 Part_PAC=0.87 Total_prod_thermique = 3000 Total_conso_gaz = (15200 - Total_conso_bois*rdt_insert - Total_chauff_SdB - Total_prod_thermique+ Total_ECS)*(1-Part_PAC)*alpha Frac_recup_bois = 0.3 Total_th_PAC = (15200 - Total_conso_bois*rdt_insert - Total_chauff_SdB+ Total_ECS)*Part_PAC*alpha sCOP = 1.8*2.5 P_elec_PAC = Total_th_PAC / sCOP Total_conso_elec = 1100*nb_pers + Total_chauff_SdB + Total_pompe_piscine + P_elec_PAC Total_conso_elec_reseau = Total_conso_elec*PV_frac_autoconso Total_prod_PV = 5900*0 Total_revente_PV = (Total_prod_PV-Total_conso_elec*(1-PV_frac_autoconso))*0 Total_charge_batterie = Total_prod_PV *0.3*0 Total_decharge_batterie = Total_charge_batterie*0.85*0 Total_prod_thermique_piscine = 3800 Total_thermique = Total_conso_gaz*rdt_chaud + Total_prod_thermique + Frac_recup_bois*Total_conso_bois + Total_th_PAC fig = go.Figure(go.Sankey( arrangement = &quot;snap&quot;, textfont=dict(color=&quot;black&quot;, size=25), node = { &quot;label&quot;: [&quot;Non renouvelable&quot;, # 0 &quot;ENR&quot;, # 1 &quot;Nucléaire&quot;, # 2 &quot;Gaz&quot;, # 3 &quot;ENR Réseau&quot;, # 4 &quot;Photovoltaïque&quot;, # 5 &quot;Solaire thermique&quot;, # 6 &quot;Air (PAC)&quot;, # 7 &quot;Bois&quot;, # 8 &quot;Electricité Réseau&quot;, # 9 &quot;Pertes&quot;, # 10 &quot;Electricité domestique&quot;, # 11 &quot;Usage direct&quot;, # 12 &quot;Batterie&quot;, # 13 &quot;Revente&quot;, # 14 &quot;Prod eau chaude&quot;, # 15 &quot;Chauffage&quot;, # 16 &quot;ECS&quot;, # 17 &quot;Chauffage piscine&quot;, # 18 &quot;PAC&quot;, # 19 &quot;Autre&quot;, # 20 &quot;Pompe Piscine&quot;, # 21 &quot;Piscine&quot; # 22 ], # &quot;x&quot;: [0.2, 0.1, 0.5, 0.7, 0.3, 0.5], # &quot;y&quot;: [0.7, 0.5, 0.2, 0.4, 0.2, 0.3], &#39;pad&#39;:40}, # 10 Pixels link = { &quot;source&quot;: [0, 0, 1, 1, 1, 1, 1, 2, 3, 4, 9,9, 5, 11,11,11, 14, 13, 3, 6, 7, 8, 15,15, 6, 12, 8, 12, 19, 12, 13, 3, 8, 12, 18, 21 ], &quot;target&quot;: [2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 12,10, 11, 12,13,14, 4, 12, 15, 15, 19, 15, 16,17, 18, 16, 16, 19, 15, 20, 10, 10, 10, 21, 22, 22 ], &quot;value&quot;: [Total_conso_elec_reseau*Ratio_pertes*Frac_nucleaire, Total_conso_elec_reseau*Ratio_pertes*Frac_gaz+ Total_conso_gaz, Total_conso_elec_reseau*Ratio_pertes*Frac_ENR_reseau, Total_prod_PV, Total_prod_thermique+Total_prod_thermique_piscine, Total_th_PAC*(1-1/sCOP), Total_conso_bois, Total_conso_elec_reseau*Ratio_pertes*Frac_nucleaire, Total_conso_elec_reseau*Ratio_pertes*Frac_gaz, Total_conso_elec_reseau*Ratio_pertes*Frac_ENR_reseau, # + INJ Total_conso_elec_reseau, Total_conso_elec_reseau*(Ratio_pertes-1), Total_prod_PV, Total_conso_elec*0-Total_decharge_batterie, Total_charge_batterie, Total_revente_PV, ### Total_revente_PV, Total_decharge_batterie, Total_conso_gaz*rdt_chaud, Total_prod_thermique, Total_th_PAC*(1-1/sCOP), Total_conso_bois*rdt_insert*Frac_recup_bois, Total_thermique-Total_ECS,Total_ECS, Total_prod_thermique_piscine, Total_chauff_SdB, Total_conso_bois*rdt_insert*(1-Frac_recup_bois), Total_th_PAC/sCOP, Total_th_PAC, Total_conso_elec-Total_th_PAC/sCOP-Total_chauff_SdB-Total_pompe_piscine, Total_charge_batterie-Total_decharge_batterie, Total_conso_gaz*(1-rdt_chaud), Total_conso_bois*(1-rdt_insert), Total_pompe_piscine, Total_prod_thermique_piscine, Total_pompe_piscine ] })) sankey_plotly_rotex_piscine_builleur_pac = pn.pane.Plotly(fig) filename = &#39;../_includes/sankey_plotly_rotex_piscine_builleur_pac.html&#39; export_plot_fastpages(pn.panel(sankey_plotly_rotex_piscine_builleur_pac), filename) . sankey_plotly_rotex_piscine_builleur_pac . Rotex + piscine + bouilleur + PAC + PV . import plotly.graph_objects as go Ratio_pertes = 2.58 Frac_nucleaire=0.65 Frac_ENR_reseau=0.25 Frac_gaz=1-Frac_ENR_reseau-Frac_nucleaire rdt_chaud=0.95 rdt_insert=0.90 PV_frac_autoconso = 0.3 nb_pers = 3 Total_conso_bois = 3500 Total_chauff_SdB = 200 Total_ECS = 600*nb_pers Total_pompe_piscine = 6*5*31*0.750 alpha=0.77 Part_PAC=0.87 Total_prod_thermique = 3000 Total_conso_gaz = (15200 - Total_conso_bois*rdt_insert - Total_chauff_SdB - Total_prod_thermique+ Total_ECS)*(1-Part_PAC)*alpha Frac_recup_bois = 0.3 Total_th_PAC = (15200 - Total_conso_bois*rdt_insert - Total_chauff_SdB+ Total_ECS)*Part_PAC*alpha sCOP = 1.8*2.5 P_elec_PAC = Total_th_PAC / sCOP Total_conso_elec = 1100*nb_pers + Total_chauff_SdB + Total_pompe_piscine + P_elec_PAC Total_prod_PV = 5900 Total_revente_PV = (Total_prod_PV-Total_conso_elec*(1-PV_frac_autoconso)) Total_charge_batterie = Total_prod_PV *0.3 Total_decharge_batterie = Total_charge_batterie*0.85 Total_conso_elec_reseau = 2140 #Total_conso_elec*PV_frac_autoconso Total_prod_thermique_piscine = 3800 Total_thermique = Total_conso_gaz*rdt_chaud + Total_prod_thermique + Frac_recup_bois*Total_conso_bois + Total_th_PAC fig = go.Figure(go.Sankey( arrangement = &quot;snap&quot;, textfont=dict(color=&quot;black&quot;, size=25), node = { &quot;label&quot;: [&quot;Non renouvelable&quot;, # 0 &quot;ENR&quot;, # 1 &quot;Nucléaire&quot;, # 2 &quot;Gaz&quot;, # 3 &quot;ENR Réseau&quot;, # 4 &quot;Photovoltaïque&quot;, # 5 &quot;Solaire thermique&quot;, # 6 &quot;Air (PAC)&quot;, # 7 &quot;Bois&quot;, # 8 &quot;Electricité Réseau&quot;, # 9 &quot;Pertes&quot;, # 10 &quot;Electricité domestique&quot;, # 11 &quot;Usage direct&quot;, # 12 &quot;Batterie&quot;, # 13 &quot;Revente&quot;, # 14 &quot;Prod eau chaude&quot;, # 15 &quot;Chauffage&quot;, # 16 &quot;ECS&quot;, # 17 &quot;Chauffage piscine&quot;, # 18 &quot;PAC&quot;, # 19 &quot;Autre&quot;, # 20 &quot;Pompe piscine&quot;, # 21 &quot;Piscine&quot; # 22 ], # &quot;x&quot;: [0.2, 0.1, 0.5, 0.7, 0.3, 0.5], # &quot;y&quot;: [0.7, 0.5, 0.2, 0.4, 0.2, 0.3], &#39;pad&#39;:20}, # 10 Pixels link = { &quot;source&quot;: [0, 0, 1, 1, 1, 1, 1, 2, 3, 4, 9,9, 5, 11,11,11, 14, 13, 3, 6, 7, 8, 15,15, 6, 12, 8, 12, 19, 12, 13, 3, 8, 12, 18, 21 ], &quot;target&quot;: [2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 11,10, 11, 12,13,14, 4, 12, 15, 15, 19, 15, 16,17, 18, 16, 16, 19, 15, 20, 10, 10, 10, 21, 22, 22 ], &quot;value&quot;: [Total_conso_elec_reseau*Ratio_pertes*Frac_nucleaire, Total_conso_elec_reseau*Ratio_pertes*Frac_gaz+ Total_conso_gaz, Total_conso_elec_reseau*Ratio_pertes*Frac_ENR_reseau, Total_prod_PV, Total_prod_thermique+Total_prod_thermique_piscine, Total_th_PAC*(1-1/sCOP), Total_conso_bois, Total_conso_elec_reseau*Ratio_pertes*Frac_nucleaire, Total_conso_elec_reseau*Ratio_pertes*Frac_gaz, Total_conso_elec_reseau*Ratio_pertes*Frac_ENR_reseau, # + INJ Total_conso_elec_reseau, Total_conso_elec_reseau*(Ratio_pertes-1), Total_prod_PV, Total_conso_elec-Total_decharge_batterie, Total_charge_batterie, Total_revente_PV, ### Total_revente_PV, Total_decharge_batterie, Total_conso_gaz*rdt_chaud, Total_prod_thermique, Total_th_PAC*(1-1/sCOP), Total_conso_bois*rdt_insert*Frac_recup_bois, Total_thermique-Total_ECS,Total_ECS, Total_prod_thermique_piscine, Total_chauff_SdB, Total_conso_bois*rdt_insert*(1-Frac_recup_bois), Total_th_PAC/sCOP, Total_th_PAC, Total_conso_elec-Total_th_PAC/sCOP-Total_chauff_SdB-Total_pompe_piscine, Total_charge_batterie-Total_decharge_batterie, Total_conso_gaz*(1-rdt_chaud), Total_conso_bois*(1-rdt_insert), Total_pompe_piscine, Total_prod_thermique_piscine, Total_pompe_piscine ] })) sankey_plotly_rotex_piscine_builleur_pac_pv = pn.pane.Plotly(fig) filename = &#39;../_includes/sankey_plotly_rotex_piscine_builleur_pac_pv.html&#39; export_plot_fastpages(pn.panel(sankey_plotly_rotex_piscine_builleur_pac_pv), filename) sankey_plotly_rotex_piscine_builleur_pac_pv . sankey_plotly_rotex_piscine_builleur_pac_pv . R&#233;f&#233;rences . 1. This is the actual footnote↩ . 2. This is the actual footnote↩ . 3. This is the actual footnote↩ .",
            "url": "https://slamer59.github.io/energies-domestique/fastpages/jupytern%20sankey/2021/04/18/Sankey_story-DP.html",
            "relUrl": "/fastpages/jupytern%20sankey/2021/04/18/Sankey_story-DP.html",
            "date": " • Apr 18, 2021"
        }
        
    
  
    
        ,"post8": {
            "title": "Introducing fastpages with hvplot",
            "content": "R&#233;cup&#233;ration de la puissance des syst&#232;mes . Puissance gaz consommés et puissance thermique restituée par la chaudière, | Puissance électrique consommé et puissance thermique restituée de la pompe à chaleur ainsi que son coefficient de performance (COP), | Puissance thermique solaire, | Puissance de chauffage de la piscine et consommation électrique, | Puissance de l&#39;insert extrapolée à partir de la puissance thermique récupérée du bouilleur, | Puissance électrique consommés, produite et stockée sur la batterie | . Panneau PV . Bois . Piscine . Gaz . PAC . Tout . energie_hvplot",
            "url": "https://slamer59.github.io/energies-domestique/fastpages/jupyter/2021/04/10/puissance.html",
            "relUrl": "/fastpages/jupyter/2021/04/10/puissance.html",
            "date": " • Apr 10, 2021"
        }
        
    
  
    
        ,"post9": {
            "title": "Introducing fastpages with hvplot",
            "content": "energie_hvplot",
            "url": "https://slamer59.github.io/energies-domestique/fastpages/jupyter/2021/04/10/energie-jour-par-jour.html",
            "relUrl": "/fastpages/jupyter/2021/04/10/energie-jour-par-jour.html",
            "date": " • Apr 10, 2021"
        }
        
    
  
    
        ,"post10": {
            "title": "Sankey diagram",
            "content": "pn.widgets.Checkbox(name=&#39;MultiSelect&#39;, value=in_vars[:1]) . ValueErrorTraceback (most recent call last) &lt;ipython-input-11-c7ac29944061&gt; in &lt;module&gt; -&gt; 1 pn.widgets.Checkbox(name=&#39;MultiSelect&#39;, value=in_vars[:1]) ~/.local/lib/python3.8/site-packages/panel/widgets/base.py in __init__(self, **params) 53 else: 54 self._param_pane = None &gt; 55 super().__init__(**params) 56 57 @classmethod ~/.local/lib/python3.8/site-packages/panel/reactive.py in __init__(self, **params) 69 70 def __init__(self, **params): &gt; 71 super().__init__(**params) 72 73 # Useful when updating model properties which trigger potentially ~/.local/lib/python3.8/site-packages/panel/viewable.py in __init__(self, **params) 508 def __init__(self, **params): 509 hooks = params.pop(&#39;hooks&#39;, []) --&gt; 510 super().__init__(**params) 511 self._hooks = hooks 512 self._update_loading() ~/.local/lib/python3.8/site-packages/panel/viewable.py in __init__(self, **params) 369 370 def __init__(self, **params): --&gt; 371 super().__init__(**params) 372 self._callbacks = [] 373 self._documents = {} ~/.local/lib/python3.8/site-packages/panel/viewable.py in __init__(self, **params) 216 type(self).sizing_mode is None): 217 params[&#39;sizing_mode&#39;] = params.get(&#39;sizing_mode&#39;, config.sizing_mode) --&gt; 218 super().__init__(**params) 219 220 ~/.local/lib/python3.8/site-packages/param/parameterized.py in __init__(self, **params) 2520 2521 self.param._generate_name() -&gt; 2522 self.param._setup_params(**params) 2523 object_count += 1 2524 ~/.local/lib/python3.8/site-packages/param/parameterized.py in override_initialization(self_, *args, **kw) 1063 original_initialized = parameterized_instance.initialized 1064 parameterized_instance.initialized = False -&gt; 1065 fn(parameterized_instance, *args, **kw) 1066 parameterized_instance.initialized = original_initialized 1067 return override_initialization ~/.local/lib/python3.8/site-packages/param/parameterized.py in _setup_params(self_, **params) 1311 self.param.warning(&#34;Setting non-parameter attribute %s=%s using a mechanism intended only for parameters&#34;, name, val) 1312 # i.e. if not desc it&#39;s setting an attribute in __dict__, not a Parameter -&gt; 1313 setattr(self, name, val) 1314 1315 @classmethod ~/.local/lib/python3.8/site-packages/param/parameterized.py in _f(self, obj, val) 316 instance_param.__set__(obj, val) 317 return --&gt; 318 return f(self, obj, val) 319 return _f 320 ~/.local/lib/python3.8/site-packages/param/parameterized.py in __set__(self, obj, val) 890 val = self.set_hook(obj,val) 891 --&gt; 892 self._validate(val) 893 894 _old = NotImplemented ~/.local/lib/python3.8/site-packages/param/__init__.py in _validate(self, val) 972 else: 973 if not isinstance(val,bool): --&gt; 974 raise ValueError(&#34;Boolean &#39;%s&#39; only takes a Boolean value.&#34;%self.name) 975 976 if val is not True and val is not False: ValueError: Boolean &#39;value&#39; only takes a Boolean value. . Panel",
            "url": "https://slamer59.github.io/energies-domestique/fastpages/jupytern%20sankey/2021/04/10/Sankey.html",
            "relUrl": "/fastpages/jupytern%20sankey/2021/04/10/Sankey.html",
            "date": " • Apr 10, 2021"
        }
        
    
  
    
        ,"post11": {
            "title": "Introducing fastpages with hvplot",
            "content": "Code Folding . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import hvplot.pandas # noqa from snippets import * . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . from bokeh.sampledata.sprint import sprint as df df.head() . . Name Country Medal Time Year . 0 Usain Bolt | JAM | GOLD | 9.63 | 2012 | . 1 Yohan Blake | JAM | SILVER | 9.75 | 2012 | . 2 Justin Gatlin | USA | BRONZE | 9.79 | 2012 | . 3 Usain Bolt | JAM | GOLD | 9.69 | 2008 | . 4 Richard Thompson | TRI | SILVER | 9.89 | 2008 | . If you want to completely hide cells (not just collapse them), read these instructions. . export_plot_fastpages(boxplot, &#39;../_includes/test.html&#39;) . test . Hover hvplot . hvplot_hover = boxplot * df.hvplot.scatter(y=&#39;Time&#39;, x=&#39;Medal&#39;, c=&#39;orange&#39;).opts(jitter=0.5) # hvplot.save(hvplot_hover, &#39;../_includes/hvplot_hover.html&#39;) hvplot_hover . Interactive Charts With Hvplot . boxinteract = df.hvplot.box(y=&#39;Time&#39;, groupby=&#39;Medal&#39;, by=&#39;Country&#39;, ylabel=&#39;Sprint Time&#39;, height=400, width=600) # boxinteract . export_plot_fastpages(boxinteract, &#39;../_includes/boxinteract.html&#39;) . . boxinteract .",
            "url": "https://slamer59.github.io/energies-domestique/fastpages/jupyter/bokeh/hvplot/2021/04/06/introducing-fastpages-hvplot.html",
            "relUrl": "/fastpages/jupyter/bokeh/hvplot/2021/04/06/introducing-fastpages-hvplot.html",
            "date": " • Apr 6, 2021"
        }
        
    
  
    
        ,"post12": {
            "title": "Introducing fastpages with hvplot",
            "content": "query_api = client.query_api() query = &#39;&#39;&#39;from(bucket: &quot;energie&quot;) |&gt; range(start: -1d) |&gt; filter(fn: (r) =&gt; r[&quot;_measurement&quot;] == &quot;solarmanpv&quot;) |&gt; filter(fn: (r) =&gt; r[&quot;_field&quot;] == &quot;Courant DC PV1&quot; or r[&quot;_field&quot;] == &quot;Courant DC PV2&quot;) |&gt; yield(name: &quot;mean&quot;)&#39;&#39;&#39; result = client.query_api().query_data_frame(org=ORG, query=query) result.columns = [&#39;result&#39;, &#39;table&#39;, &#39;start&#39;, &#39;stop&#39;, &#39;time&#39;, &#39;value&#39;, &#39;field&#39;, &#39;measurement&#39;, &#39;host&#39;, &#39;topic&#39;] result.head() . result table start stop time value field measurement host topic . 0 mean | 0 | 2021-04-18 11:52:40.951513+00:00 | 2021-04-19 11:52:40.951513+00:00 | 2021-04-18 11:52:52.548802+00:00 | 6.55 | Courant DC PV1 | solarmanpv | telegraf1 | SolarmanPV/realTimeDataImp | . 1 mean | 0 | 2021-04-18 11:52:40.951513+00:00 | 2021-04-19 11:52:40.951513+00:00 | 2021-04-18 11:53:11.810644+00:00 | 6.55 | Courant DC PV1 | solarmanpv | telegraf1 | SolarmanPV/realTimeDataImp | . 2 mean | 0 | 2021-04-18 11:52:40.951513+00:00 | 2021-04-19 11:52:40.951513+00:00 | 2021-04-18 11:53:32.162518+00:00 | 6.55 | Courant DC PV1 | solarmanpv | telegraf1 | SolarmanPV/realTimeDataImp | . 3 mean | 0 | 2021-04-18 11:52:40.951513+00:00 | 2021-04-19 11:52:40.951513+00:00 | 2021-04-18 11:53:50.681999+00:00 | 6.55 | Courant DC PV1 | solarmanpv | telegraf1 | SolarmanPV/realTimeDataImp | . 4 mean | 0 | 2021-04-18 11:52:40.951513+00:00 | 2021-04-19 11:52:40.951513+00:00 | 2021-04-18 11:54:10.911786+00:00 | 6.55 | Courant DC PV1 | solarmanpv | telegraf1 | SolarmanPV/realTimeDataImp | . influxdb_hvplot",
            "url": "https://slamer59.github.io/energies-domestique/fastpages/jupyter/2021/04/06/Extract-influxdb-via-panel.html",
            "relUrl": "/fastpages/jupyter/2021/04/06/Extract-influxdb-via-panel.html",
            "date": " • Apr 6, 2021"
        }
        
    
  
    
        ,"post13": {
            "title": "Introducing fastpages",
            "content": ". We are very pleased to announce the immediate availability of fastpages. fastpages is a platform which allows you to create and host a blog for free, with no ads and many useful features, such as: . Create posts containing code, outputs of code (which can be interactive), formatted text, etc directly from Jupyter Notebooks; for instance see this great example post from Scott Hawley. Notebook posts support features such as: Interactive visualizations made with Altair remain interactive. | Hide or show cell input and output. | Collapsable code cells that are either open or closed by default. | Define the Title, Summary and other metadata via a special markdown cells | Ability to add links to Colab and GitHub automatically. | . | Create posts, including formatting and images, directly from Microsoft Word documents. | Create and edit Markdown posts entirely online using GitHub&#39;s built-in markdown editor. | Embed Twitter cards and YouTube videos. | Categorization of blog posts by user-supplied tags for discoverability. | ... and much more | . fastpages relies on Github pages for hosting, and Github Actions to automate the creation of your blog. The setup takes around three minutes, and does not require any technical knowledge or expertise. Due to built-in automation of fastpages, you don&#39;t have to fuss with conversion scripts. All you have to do is save your Jupyter notebook, Word document or markdown file into a specified directory and the rest happens automatically. Infact, this blog post is written in a Jupyter notebook, which you can see with the &quot;View on GitHub&quot; link above. . fast.ai have previously released a similar project called fast_template, which is even easier to set up, but does not support automatic creation of posts from Microsoft Word or Jupyter notebooks, including many of the features outlined above. . Because fastpages is more flexible and extensible, we recommend using it where possible. fast_template may be a better option for getting folks blogging who have no technical expertise at all, and will only be creating posts using Github&#39;s integrated online editor. . Setting Up Fastpages . The setup process of fastpages is automated with GitHub Actions, too! Upon creating a repo from the fastpages template, a pull request will automatically be opened (after ~ 30 seconds) configuring your blog so it can start working. The automated pull request will greet you with instructions like this: . . All you have to do is follow these instructions (in the PR you receive) and your new blogging site will be up and running! . Jupyter Notebooks &amp; Fastpages . In this post, we will cover special features that fastpages provides for Jupyter notebooks. You can also write your blog posts with Word documents or markdown in fastpages, which contain many, but not all the same features. . Options via FrontMatter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . All of the above settings are enabled in this post, so you can see what they look like! . the summary field (preceeded by &gt;) will be displayed under your title, and will also be used by social media to display as the description of your page. | toc: setting this to true will automatically generate a table of contents | badges: setting this to true will display Google Colab and GitHub links on your blog post. | comments: setting this to true will enable comments. See these instructions for more details. | author this will display the authors names. | categories will allow your post to be categorized on a &quot;Tags&quot; page, where readers can browse your post by categories. | . Markdown front matter is formatted similarly to notebooks. The differences between the two can be viewed on the fastpages README. . Code Folding . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . If you want to completely hide cells (not just collapse them), read these instructions. . Interactive Charts With Altair . Interactive visualizations made with Altair remain interactive! . We leave this below cell unhidden so you can enjoy a preview of syntax highlighting in fastpages, which uses the Dracula theme. . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;IMDB_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget IMDB_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | 6.1 | . 1 First Love, Last Rites | 10876.0 | 300000.0 | 6.9 | . 2 I Married a Strange Person | 203134.0 | 250000.0 | 6.8 | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | NaN | . 4 Slam | 1087521.0 | 1000000.0 | 3.4 | . Other Features . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Images w/Captions . You can include markdown images with captions like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Of course, the caption is optional. . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . More Examples . This tutorial contains more examples of what you can do with notebooks. . How fastpages Converts Notebooks to Blog Posts . fastpages uses nbdev to power the conversion process of Jupyter Notebooks to blog posts. When you save a notebook into the /_notebooks folder of your repository, GitHub Actions applies nbdev against those notebooks automatically. The same process occurs when you save Word documents or markdown files into the _word or _posts directory, respectively. . We will discuss how GitHub Actions work in a follow up blog post. . Resources &amp; Next Steps . We highly encourage you to start blogging with fastpages! Some resources that may be helpful: . fastpages repo - this is where you can go to create your own fastpages blog! | Fastai forums - nbdev &amp; blogging category. You can ask questions about fastpages here, as well as suggest new features. | nbdev: this project powers the conversion of Jupyter notebooks to blog posts. | . If you end up writing a blog post using fastpages, please let us know on Twitter: @jeremyphoward, @HamelHusain. .",
            "url": "https://slamer59.github.io/energies-domestique/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "relUrl": "/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "date": " • Feb 21, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://slamer59.github.io/energies-domestique/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://slamer59.github.io/energies-domestique/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}